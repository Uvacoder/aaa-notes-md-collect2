[{"_id":"5b38ea524cdfd51968fdff5f","updatedAt":"2018-12-10T12:30:21.203Z","createdAt":"2018-07-01T14:50:58.425Z","title":"Garbage Collection","body":"# Garbage Collection\n\nhttps://javascript.info/garbage-collection\n\nIn javaScript Garbage collection is based on `rechability`.\n\nChecking whether and Object are Primitive Object Values are rechablie from the Root (Global)\n\n### Simple Example\n```js\n// user has a reference to the object\nlet user = {\n  name: \"John\"\n}\n```\n[![Simple Example](https://javascript.info/article/garbage-collection/memory-user-john.png \"Simple Example\")](\"Simple Example \"Simple Example\")\n\nCurrently The Variable `user` reference the Object with property `name` which stored the value Jhon. So the Object is rechable from the global scope through `user` variable.\n\nBut Once the user Variable Overridden, The The Object becomes unrechanble.\n\n```js\nuser = null;\n```\n\n[![Object Null](https://javascript.info/article/garbage-collection/memory-user-john-lost.png  \"Object Null\")](Object Null \"Object Null\")\n\nSo The Object memory does't have any reference we can delete this\n\n### Two references\n```js\n// user has a reference to the object\nlet user = {\n  name: \"John\"\n};\n\nlet admin = user;\n```\n[![two ref](https://javascript.info/article/garbage-collection/memory-user-john-admin.png \"two ref\")](two ref \"two ref\")\n\nNow if we do the same:\n```js\nuser = null;\n```\nThen the object is still reachable via admin global variable, so it’s in memory. If we overwrite admin too, then it can be removed.\n\n### Interlinked objects\n```js\nfunction marry(man, woman) {\n  woman.husband = man;\n  man.wife = woman;\n\n  return {\n    father: man,\n    mother: woman\n  }\n}\n\nlet family = marry({\n  name: \"John\"\n}, {\n  name: \"Ann\"\n});\n```\n[![2 family](https://javascript.info/article/garbage-collection/family.png \"2 family\")](2 family \"2 family\")\n\nAs of now, all objects are reachable.\n\nNow let’s remove two references:\n```js\ndelete family.father;\ndelete family.mother.husband;\n```\n[![delete member](https://javascript.info/article/garbage-collection/family-delete-refs.png \"delete member\")](delete member \"delete member\")\n\n\nIt’s not enough to delete only one of these two references, because all objects would still be reachable.\n\nBut if we delete both, then we can see that John has no incoming reference any more:\n![](https://javascript.info/article/garbage-collection/family-no-father.png)\n\n\nOutgoing references do not matter. Only incoming ones can make an object reachable. So, John is now unreachable and will be removed from the memory with all its data that also became unaccessible.\n\nAfter garbage collection:\n![](https://javascript.info/article/garbage-collection/family-no-father-2.png)\n\n### Unreachable island\n\nIt is possible that the whole island of interlinked objects becomes unreachable and is removed from the memory.\n\nThe source object is the same as above. Then:\n```js\nfamily = null;\n```\n\nThe in-memory picture becomes:\n![](https://javascript.info/article/garbage-collection/family-no-family.png)\n\n### Garbage Collection Algorithms\nSome of the Internal Algorithms of Garbage Collection\n- mark and sweep\n- Generational collection \n- Incremental collection\n- Idle-time collection\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3db984519c190f74a3ded5","updatedAt":"2018-12-10T10:59:39.955Z","createdAt":"2018-07-05T06:24:04.733Z","title":"new Operator","body":"# new Operator\n\n### How it is used\n```js\nfunction User(name) {\n  this.name = name;\n  this.isAdmin = false;\n}\n\nlet user = new User(\"Jack\");\n\nalert(user.name); // Jack\nalert(user.isAdmin); // false\n```\n\n### Behind the scenes\n```js\nfunction User(name) {\n  // this = {};  (implicitly)\n\n  // add properties to this\n  this.name = name;\n  this.isAdmin = false;\n\n  // return this;  (implicitly)\n}\n```\n### Return from constructors\n\nUsually, constructors do not have a `return` statement. Their task is to write all necessary stuff into `this`, and it automatically becomes the result.\n\nBut if there is a return statement, then the rule is simple:\n\n- If return is called with object, then it is returned instead of this.\n- If return is called with a primitive, it’s ignored.\nIn other words, return with an object returns that object, in all other cases this is returned\n\n### Explicit return of constructor function\n\n##### Behaviour when  Non Object return value inside constructor function\n\n```javascript=\nfunction fnClass(){\n\tthis.print = function(){}\n\treturn '1'\n}\nvar fnInstance = new fnClass()\ntypeof fnInstance === 'object' //true\ntypeof fnInstance.print === 'function' //true\n```\nAs we can see the explicit return value is ignored, the `this` returned\n\n##### Behaviour when  Object return value inside constructor function\n\n```javascript=\nvar mirrorObj = {\n\tamIMirror : true\n}\nfunction fnClass(){\n\tamIMirror : false\n\treturn mirrorObj\n}\nvar fnInstance = new fnClass()\ntypeof fnInstance === 'object' //true\ntypeof fnInstance.amIMirror === true //true\n```\nAs we can see the explict return value got accepted when it is a Object\n\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3df0d1b78294198884109a","updatedAt":"2018-07-05T10:20:01.864Z","createdAt":"2018-07-05T10:20:01.864Z","title":"Object.prototype","body":"# Object.prototype","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b4bf59f89426b0b200c1299","updatedAt":"2018-07-16T01:32:15.332Z","createdAt":"2018-07-16T01:32:15.332Z","title":"OO IQ","body":"# OO IQ","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5ba20131a1995b07022d8b70","updatedAt":"2018-09-19T07:56:33.247Z","createdAt":"2018-09-19T07:56:33.247Z","title":"winston tutorial","body":"# winston tutorial","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5ba32908a363110522c0d082","updatedAt":"2018-09-20T05:09:03.027Z","createdAt":"2018-09-20T04:58:48.863Z","title":"Interview Questions in javascript","body":"# Q JS\n\n## js\n1. What is Object in JavaScript?\n2. What is \"this\"? What is its value?\n3. What is a Closure and why are they so useful to us?\n4. Can you explain the difference between == and ===?\n5. Explain why Asynchronous code is important in JavaScript?\n6. Tell me your JavaScript Naming Convention?\n7. What is Hoisted in JavaScript?\n8. What is scope variable in JavaScript?\n9. How to Achieve Inheritance in JavaScript?\n10. How to empty an array in javascript\n11. \n## OOJS\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b36696fb0b1541090ac636a","updatedAt":"2019-04-11T03:15:35.639Z","createdAt":"2018-06-29T17:16:31.563Z","title":"Object","body":"# Object\n\n### Computed Property\n```js\nlet fruit = 'apple';\n\nlet bag = {\n  [fruit]: 5, // the name of the property is taken from the variable fruit\n};\n```\n\n### Reserved Words are allowed as Object Properties\nA variable cannot have a name equal to one of language-reserved words like “for”, “let”, “return” etc.\n\nBut for an object property, there’s no such restriction. Any name is fine:\n```js\n let obj = {\n  for: 1,\n  let: 2,\n  return: 3\n}\n\nalert( obj.for + obj.let + obj.return );\n```\n### Object Property proto\nBasically, any name is allowed, but there’s a special one: `__proto__`\n```js\nlet obj = {};\nobj.__proto__ = 5;\nalert(obj.__proto__); // [object Object], didn't work as intended\n```\n\n### Property value shorthand\nIn real code we often use existing variables as values for property names.\n\nFor instance\n```js\nfunction makeUser(name, age) {\n  return {\n    name: name,\n    age: age\n    // ...other properties\n  };\n}\n\nlet user = makeUser(\"John\", 30);\nalert(user.name); // John\n```\nIn the example above, properties have the same names as variables. The use-case of making a property from a variable is so common, that there’s a special property value shorthand to make it shorter.\n\nInstead of name:name we can just write name, like this:\n```js\nfunction makeUser(name, age) {\n  return {\n    name, // same as name: name\n    age   // same as age: age\n    // ...\n  };\n}\n```\n\nWe can use both normal properties and shorthands in the same object:\n```js\nlet user = {\n  name,  // same as name:name\n  age: 30\n};\n```\n\n### Property Existence check\nlet user = {};\n\n```js\nalert( user.noSuchProperty === undefined ); // true means \"no such property\"\n```\nor\n```js\nlet user = { name: \"John\", age: 30 };\n\nalert( \"age\" in user ); // true, user.age exists\nalert( \"blabla\" in user ); // false, user.blabla doesn't exist\n```\n\n### The for…in loop\n```js\nfor(key in object) {\n  // executes the body for each key among object properties\n}\n```\nNote that all “for” constructs allow us to declare the looping variable inside the loop, like let key here.\n```js\n\nfor(let key in user) {\n  // keys\n  alert( key );  // name, age, isAdmin\n  // values for the keys\n  alert( user[key] ); // John, 30, true\n}\n```\n\n### Ordered like an object\n```js\nlet codes = {\n  \"49\": \"Germany\",\n  \"41\": \"Switzerland\",\n  \"44\": \"Great Britain\",\n  // ..,\n  \"1\": \"USA\"\n};\n\nfor(let code in codes) {\n  alert(code); // 1, 41, 44, 49\n}\n```\nBut if we run the code, we see a totally different picture:\n\nUSA (1) goes first\nthen Switzerland (41) and so on.\n### Integer property\nSo, “49” is an Integer property name, because when it’s transformed to an integer number and back, it’s still the same. But “+49” and “1.2” are not:\n```js\n // Math.trunc is a built-in function that removes the decimal part\nalert( String(Math.trunc(Number(\"49\"))) ); // \"49\", same, integer property\nalert( String(Math.trunc(Number(\"+49\"))) ); // \"49\", not same \"+49\" ⇒ not integer property\nalert( String(Math.trunc(Number(\"1.2\"))) ); // \"1\", not same \"1.2\" ⇒ not integer property\n````\n### Two objects are equal only if they are the same object.\n\n```js\nlet a = {};\nlet b = a; // copy the reference\n\nalert( a == b ); // true, both variables reference the same object\nalert( a === b ); // true\n```\n\n```js\nlet a = {};\nlet b = {}; // two independent objects\n\nalert( a == b ); // false\n```\n\n### Object.assign\nHow to get clone of the object rather than getting reference of the object\n```js\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = {}; // the new empty object\n\n// let's copy all user properties into it\nfor (let key in user) {\n  clone[key] = user[key];\n}\n\n// now clone is a fully independant clone\nclone.name = \"Pete\"; // changed the data in it\n\nalert( user.name ); // still John in the original object\n```\n\nRather than writing for loop for we can use `Object.assign` function \n\nThe syntax is \n`Object.assign(dest[, src1, src2, src3...])\n`\n\nAnd Example for Cloning using Object.assign\n```\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet clone = Object.assign({}, user);\n```\nMore Examples about Object.assign\n\n```js\nlet user = { name: \"John\" };\n\nlet permissions1 = { canView: true };\nlet permissions2 = { canEdit: true };\n\n// copies all properties from permissions1 and permissions2 into user\nObject.assign(user, permissions1, permissions2);\n\n// now user = { name: \"John\", canView: true, canEdit: true }\n```\n\nIf the destination Object has a property of any one of the source Object property then Destination Obj Property  value will be overridden by the source Object Property value\n\n```js\nlet user = { name: \"John\" };\n\n// overwrite name, add isAdmin\nObject.assign(user, { name: \"Pete\", isAdmin: true });\n\n// now user = { name: \"Pete\", isAdmin: true }\n```\n\n### Deep Cloning\n\nthe simple Object.assign will create a clone only when all the Object properties Data types are Primatives\n\nIf Source Object has a property and if that is Object, Then Object.assign will not help\n\n```js\nlet user = {\n  name: \"John\",\n  sizes: {\n    height: 182,\n    width: 50\n  }\n};\n\nlet clone = Object.assign({}, user);\n\nalert( user.sizes === clone.sizes ); // true, same object\n\n// user and clone share sizes\nuser.sizes.width++;       // change a property from one place\nalert(clone.sizes.width); // 51, see the result from the other one\n```\n\nTo fix that we should use a cloning loop which check any of the cloning property is also a Object, If yes then it replicates that structure as well which is called `deep cloning`\n\n### Object.seal\n:sparkle: method seals an object, preventing new properties from being added to it \n\n:sparkle: marking all existing properties as non-configurable.\n\n```javascript=\nconst object1 = {\n  property1: 42\n};\n\nObject.seal(object1);\nobject1.property1 = 33;\nconsole.log(object1.property1);\n// expected output: 33\n\ndelete object1.property1; // silently cannot delete when sealed\nobject1.anotherPropery = 2; // silently cannot be added\n```\n\nWe can also check whether it's sealed through\n\n```javascript=\nObject.isSealed(obj); // === true\n```\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3dfd18b78294198884109c","updatedAt":"2018-07-14T07:05:57.807Z","createdAt":"2018-07-05T11:12:24.413Z","title":"Object Creation","body":"# Object Creation\n\nWays to Create\n- Object.create()\n- new Object,\n- var a = {};\n- constructor function\n### Object.create()\n\n```js\nObject.create(prototype_object, propertiesObject)\n```\n\n`Object.create` methods accepts two arguments.\n\n`prototypeObject`: Newly created objects prototype object. It has to be an object or null.\n\n`propertiesObject`: Properties of the new object. This argument is optional\n\n\n[![Object.create](https://cdn-images-1.medium.com/max/800/1*rSHmnlUotrjc5lXV1xDtGA.png \"Object.create\")](Object.create \"Object.create\")\n\n### Creating Object With Prototype\n\n```js\nprototypeObject = {\n\tfullName: function(){\n\t\treturn this.firstName + \" \" + this.lastName\t\t\n\t}\n}\n\nvar person = Object.create(prototypeObject)\n\nconsole.log(person) // Object with prototype object as prototypeObject and no properties\n\n// Adding properties to the person object\nperson.firstName = \"Virat\";\nperson.lastName = \"Kohli\";\n\nperson.fullName() // Virat Kohli\n```\n\n[![Create object with prototype](https://cdn-images-1.medium.com/max/800/1*oRQuacFiOY4oY8CveoIWRQ.png \"Create object with prototype\")](Create object with prototype \"Create object with prototype\")\n### propertiesObject\n\nIn the above example\nwe have added `firstName` and `lastName` properties after the object creation. It would have been great if we could add these properties while creating the object. To do that, we will use the `2nd argument of Object.create` method.\n\n`propertiesObject` is used to create properties on new object. It acts as a `descriptor` for the new properties to be defined. Descriptors can be `data descriptor` or `access descriptors`.\n\nData descriptors are\n1. configurable\n2. enumerable\n3. value\n4. writable\n\nAccess descriptors are\n1. get\n2. set\n\n\n```js\nprototypeObject = {\n\tfullName: function(){\n\t\treturn this.firstName + \" \" + this.lastName\t\t\n\t}\n}\n\nvar person = Object.create(prototypeObject, {\n      'firstName': {\n\tvalue: \"Virat\", \n\twritable: true, \n\tenumerable: true\n      },\n      'lastName': {\n\tvalue: \"Kohli\",\n\twritable: true,\n\tenumerable: true\n      }\n})\n    \nconsole.log(person) // Object with prototype object as prototypeObject and properties as firstName and lastName\n```\n\n### Creation Object by Literal {}\n```js\nvar human = {}\nconsole.log(human);// {}\n```\n\n### Creating Object by new\n```\nvar human = new Object()\nconsole.log(human);// {}\n```\n### Constructor \n\nSome Testing and understanding\n```js\nfunction Pai(){\n\n}\nvar hai = Object.create({})\nvar bai = {};\nvar dai = new Object();\nvar pai = new Pai()\n\nhai instanceof Object //true\nbai instanceof Object //true\ndai instanceof Object //true\n\npai instanceof Object //true\npai instanceof Object //true\n```\n#### hai\n![](https://i.snag.gy/ydZ8V7.jpg)\n\n#### bai\n![](https://i.snag.gy/g5cITN.jpg)\n\n#### dai\n![](https://i.snag.gy/5URvKA.jpg)\n\n#### pai\n![](https://i.snag.gy/WEgUdm.jpg)\n\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3e3e7ab78294198884109e","updatedAt":"2019-02-13T13:48:37.999Z","createdAt":"2018-07-05T15:51:22.048Z","title":"Prototype","body":"# Prototype\n\nhttps://hackernoon.com/prototypes-in-javascript-5bba2990e04b\n\n\n### Prototype property, Prototype Object, Constructor property\n\n- When a function is created in JavaScript, JavaScript engine adds a `prototype` property to the function. \n\n- This `prototype` property is an object (called as `prototype object`) \n\n- IT has a `constructor` property by default. \n\n- `constructor` property points back to the `function` on which `prototype object` is a `property`. \n\n- We can access the function’s prototype property using the syntax `functionName.prototype`.\n\n![](https://cdn-images-1.medium.com/max/800/1*15Qo3ab3NPkLfXpj5AncaQ.png)\n\n\nThe above example shows Function Called `Human`,\n`Human` Function has a `prototype` property\n`prototype` property points to `prototype` Object\n`prototype` Object has a `constructor` property\n`constructor` property points back to `Human` Function\n\n\n```js\nfunction Human(firstName, lastName) {\n\tthis.firstName = firstName,\n\tthis.lastName = lastName,\n\tthis.fullName = function() {\n\t\treturn this.firstName + \" \" + this.lastName;\n\t}\n}\n```\n\nWhat Human Function has inside `prototype` property\n```js\nconsole.log(Human.prototype)\n```\n![](https://cdn-images-1.medium.com/max/1000/1*kh4nYJdSFj76DM576F_brg.png)\n\n\nSo from the above image we can able understand prototype property of a function is a Object with two property\n\n1. `constructor` property (which points back to Human Function)\n2. `__proto__` property (which is called as hich is called as `dunder proto`)\n\n\n### Instance of a Constructor Function \n\n```js\nvar person1 = new Human(\"Virat\", \"Kohli\");\n```\n\nLet’s create Human instances person1 and person2 using the Human constructor function\n\nAs we can see in the below Image `person1` has a `__proto__` property which points back to `prototype Object` of the `constructor` function (Human);\n\n![](https://cdn-images-1.medium.com/max/800/1*425LxRkFEldC5CJWyhZRBg.png)\n\nIf we print the person 1 It will print\n![](https://cdn-images-1.medium.com/max/800/1*j4eUj1Ck_M93pijoX8S3Bw.png)\n\n\nIn the above  `person.__proto__` and `Human.prototype both are equal`\n\n```js\nperson1.__proto__ === Human.prototype //true\nperson1.__proto__.constructor === Human //true\nperson`.__proto__.constructor === Human.prototype.constructor //true\n```\n\n### dunder proto is constructor function's prototype property in all instances\n\nLet's Create one more Human instance\n```\nvar person2 = new Human(\"Sachin\", \"Tendulkar\");\n```\n\n![](https://cdn-images-1.medium.com/max/800/1*5qHhF8HTzZD2xdx3p-RLIQ.png)\n\n\nNow from the above image we can able to see \n`person1` and `person1` both share same `dunder proto perperty`\n\n> `Prototype object` of the `constructor function` is shared among all the objects created using the constructor function.\n\n\nIn the above `person1` and `person2` will have it's own property and method, Having own properties makes senses, But having own methods(`fullname`) does't make sense because having copy of a method for every object instance consumes more memory,\n\n\nWe have understood that the `prototype Object` of the constructor function is shared among it's instances, So lets declare the constructor function methods inside the prototype property. \n\n### Property Delegation Using prototype\n\n//Create an empty constructor function\n```js\nfunction Person(){\n\n}\nPerson.prototype.name = \"Ashwin\" ;\n\nvar person1 = new Person();\nconsole.log(person1.name)//  Ashwin\n```\nIf we print `person1`\n\n![](https://cdn-images-1.medium.com/max/800/1*TrdhtLL9toNPQcmSgbFE7A.png)\n\n\n- It doest have any property named `name`\n\n- So What basically javascript engine does is it tried to find the `name` property in the `person1` Object,\n- Once it is not available, It tried to find `name` in the `dunder proto` of the `person1` and prints the value.\n\n- For properties other than `name` it will go on all the `dunder proto` of the `dunder proto` until `dunder proto` becomes undefined.\n\n### Behaviour between primitive and non-primitive when it comes to property(prototype) delegation\n\nLet's create `person1` and `person2` from the below `Person` constructor\n```js\nfunction Person(){\n\n}\nPerson.prototype.name = 'Ashwin'\nPerson.friends = ['Jadeja', 'Vijay'];\n\nvar person1= new Person();\nvar person2 = new Person();\n```\n\ncurrently both the persons will have same `name` and same `friends`, Lets change the name of `person1` and add new friend to him.\n\n```js\nperson1.name = 'Ganguly';\nperson1.friends.push('Karthik');\n```\n\n\nNow If we print `person2` name and person1 `friends`\n\n```js\nconsole.log(person1.name) //Ganguly\nconsole.log(person2.name) //Ashwin\nconsole.log(person1.friends) //['Jadeja', 'Vijay', 'Karthik']\nconsole.log(person2.friends) //['Jadeja', 'Vijay', 'Karthik']\n```\n\n\nWe can able to see `primitive` types does't change value of `dunder proto`, It just added new property `name` insdie `person1`;\n\nBut for `non-primitive` types the value is updated inside the `dunder proto`\n\n\nIn the above case if we need `friends` property not to be shared among `Instances` we simple have to move `friends` property from `prototype` of the `constructor Function` to inside the `constructor` itself\n\n```\nfunction Person(){\n\tthis.friends = ['Jadeja', 'Vijay'];\n}\nPerson.prototype.name = 'Ashwin'\n\n```\n\n### getPrototypeOf\n```js\nvar Hai = function(){\n\tthis.name = 'hai'\n}\nvar blaHai = new Hai()\nObject.getPrototypeOf(blaHai) === Hai.prototype //true\n```\n\n\n### Prototype Over-riding\n```javascript=\nfunction Ninja(){\n\tthis.swing = true;\n}\n\nvar ninja1 = new Ninja();\n\nNinja.prototype.swingSword = function(){\n\treturn this.swing;\n}\n\nconsole.log(ninja1.swingSword()) // true, Accessible\n\nNinja.prototype = {\n\tjumpingHigh : function(){\n\t\treturn true;\n\t}\n}\n\nconsole.log(ninja1.swingSword()) // true, Still accessible because `ninja1.__proto__` has the reference of old `Ninja.prototype` Object\n```\n\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b40218a23ff1613c4056ff0","updatedAt":"2019-02-20T14:47:31.614Z","createdAt":"2018-07-07T02:12:26.850Z","title":"Getter Setter","body":"# Getter Setter\n\n### get and set generated properties\nJavascript provides option to access a `property` through a linked function defined using `get` Keyword.\n\nAlso allows a property to be stored through a function using `set` keyword\n\n```js\nlet obj = {\n  firstName: 'Siva',\n  lastName: 'Shanmugam',\n  get fullName() {\n    return this.firstName + \" \" + this.lastName\n  },\n  set fullName(value) {\n    var words = name.toString().split(' ');\n    this.firstName = words[0] || '';\n    this.lastName = words[1] || '';\n  }\n};\n\nconsole.log(obj.fullName) //Siva Shanmugam\nobj.fullName = 'Sivashanmugam Kannan'\nconsole.log(obj.fullName) //Sivashanmugam Kannan\nconsole.log(obj.firstName) //Sivashanmugam\nconsole.log(obj.lastName) //Kannan\n```\n\n### set and get using Object.defineProperty \n```js\nObject.defineProperty(person, 'fullName', {\n    get: function() {\n        return firstName + ' ' + lastName;\n    },\n    set: function(name) {\n        var words = name.split(' ');\n        this.firstName = words[0] || '';\n        this.lastName = words[1] || '';\n    }\n});\n```\n\nRather than setting the object properties through object literal Creating through `Object.defineProperty`  gives advantage of setting the `property descriptors` \n(Writable, Readable, Enumarable, value) \nalong while creating.\n\nIf we set `value` property descriptor then `get` and `set` function not allowed  for the property and vice versha\n\n\n#### Private variable implementation using getter and setter\n![](https://i.imgur.com/YJlj6yV.png)\n\n### Validating properties using getter and Setter\n```javascript=\nlet obj = {\n  get count() {\n    return this.count;\n  },\n  set count(value) {\n    if(Number.isInteger(value){\n\t\tthis.count = value;\n\t}else{\n\t\tthrow 'Error, Invalid variable type, Only Integers Allowed';\n\t}\n  }\n};\n```\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b4442db791ea612e81e43bd","updatedAt":"2018-07-11T05:05:53.514Z","createdAt":"2018-07-10T05:23:39.384Z","title":"Lamda Calculas","body":"# Lamda Calculas\n\nhttps://www.youtube.com/watch?v=3VQ382QG-y4\n### Identification\n```js\nI = a => a\n```\n\n### Mocking Bird\n```js\nM = f => f(f)\n```\n\n### Kestral\n```js\nK = a => b=> a\n```\n\n### Kite\n```js\nKI = a => b => b\n```\n\n### Cardinal\n```js\nC = f => a => b => f(b)(a)\n```\n\n### True and False\n```\nT = K\nT.inspect = function() { return 'T / K' } \nF = KI \nF.inspect = function() { return 'F / KI' }\n```\n\n### Not Operator\n```js\nnot = p => p(F)(T)\n```\n\n### And Operator\n```js\nand = p => q => p(q)(p)\n```\n\n### Boolean equality\nchecks whether True boleans same or not\n```js\nbeq = p => q => p(q)(not(q))\n```\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f26b2337a3119ec7ceb8","updatedAt":"2018-09-07T03:37:15.793Z","createdAt":"2018-09-07T03:37:15.793Z","title":"Async & Await","body":"# Async & Await\n\nBasicallly Async & await is a better syntax sugar for promise's `then`\n\n```javascript=\nasync function f() {\n  return 1;\n}\n```\n\nThe above function `f` is `async` function which will return a promise even it does't use `resolve` and `reject`\n\nThis is basically equvalent to \n```javascript=\nfunction f() {\n    Promise.resolve(1)\n}\n```\n\nif the execute the above code\n```javascript=\nf.then(function(data){\n    console.log(data) //``\n})\n```\n\nWhat is await is that instead of writing the `then`  combination for to handle when a `promise` is resolving or getting rejected\n\n```javascript=\nlet result = await f;\n```\nThe above code is equvalent of the below code\n\n```javascript=\nlet result;\nf.then(function(data){\n    console.log(data) //``\n    result = data;\n})\n```\n\nWe cannot `await` for a non-async function it will throw error.\n```javascript=\n    function f(){return 1}; let result = await f //error\n```\n\nThe error will be \n```\nSyntaxError: await is only valid in async function\n```\n**sample async function example**\n```javascript=\nasync function f() {\n  return Promise.resolve(1);\n}\n\nf().then(alert); // 1\n```\n\n**sample async await example**\n```javascript=\nconst fs = require('fs');\nasync function f() {\n    let readFile = new Promise(function (resolve, reject) {\n        setTimeout(() => {\n            resolve('Hi I am awaited (callback) result');\n        }, 1000);\n    })\n    const result = await readFile;\n    console.log(result);\n}\nf(); //prints Hi I am awaited (callback) result after one second\n```","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f2912337a3119ec7ceb9","updatedAt":"2018-09-07T03:37:53.035Z","createdAt":"2018-09-07T03:37:53.035Z","title":"call, apply, bind","body":"# call, apply, bind\n\n\n\n## call\n\nEach argument is sent as a parameter in the invocation function\n\n```javascript=\nvar obj = {name:\"Niladri\"};\n\nvar greeting = function(a,b,c){\n    return \"welcome \"+this.name+\" to \"+a+\" \"+b+\" in \"+c;\n};\n\nconsole.log(greeting.call(obj,\"Newtown\",\"KOLKATA\",\"WB\"));\n```\n\n## apply\n\nArguments are sent as a array to the function in the invocation function\n\n```javascript=\nvar obj = {name:\"Niladri\"};\n\nvar greeting = function(a,b,c){\n    return \"welcome \"+this.name+\" to \"+a+\" \"+b+\" in \"+c;\n};\n\n// array of arguments to the actual function\nvar args = [\"Newtown\",\"KOLKATA\",\"WB\"];  \nconsole.log(\"Output using .apply() below \")\nconsole.log(greeting.apply(obj,args));\n```\n\n## bind \n\nReturns a new function with predefined `this` parameter \n\n```javascript=\nvar obj = {name:\"Niladri\"};\n\nvar greeting = function(a,b,c){\n    return \"welcome \"+this.name+\" to \"+a+\" \"+b+\" in \"+c;\n};\n\n//creates a bound function that has same body and parameters \nvar bound = greeting.bind(obj); \n\n\nconsole.dir(bound); ///returns a function\n\nconsole.log(\"Output using .bind() below \");\n\nconsole.log(bound(\"Newtown\",\"KOLKATA\",\"WB\")); //call the bound function\n```","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f2c52337a3119ec7cebb","updatedAt":"2019-04-04T13:44:55.491Z","createdAt":"2018-09-07T03:38:45.024Z","title":"javaScript Lifecycle","body":"# javaScript Lifecycle\n\nhttps://javascript.info/onload-ondomcontentloaded\n\n## DOMContentLoaded\n\n### State\n the browser fully loaded HTML, and the DOM tree is built, but external resources like pictures <img> and stylesheets may be not yet loaded.\n\n### Event\nDOM is ready, so the handler can lookup DOM nodes, initialize the interface.\n\nThe `DOMContentLoaded` event happens on the `document` object.\n\nHow to catch it\n```javascript=\ndocument.addEventListener(\"DOMContentLoaded\", ready);\n```\nEvent gets triggered before loading images\n```javascript=\n<script>\n  function ready() {\n    alert('DOM is ready');\n\n    // image is not yet loaded (unless was cached), so the size is 0x0\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  }\n\n  document.addEventListener(\"DOMContentLoaded\", ready);\n</script>\n\n<img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&cache=0\">\n\n```\n### Relation with scripts\nWhile building DOM (document) if the browser encounters a `script` tag inbetween for example`body` it has to load the script and execute the script before it continues including if the scripts are external `(src='')` \n\nThe only exception is `async` and `defer` attributes inside script tags, They basically tell browser to continue processing the without waiting for them to load\n\n#### Async and defer\nThese attributes will only work if the scripts are external scripts (if there is no `src` tag they are ignored )\n\n\n\n|  | Async | Defer |\n| -------- | -------- | -------- |\n| Order     | Scripts with async execute in the load-first order. Their document order doesn’t matter – which loads first runs first.     | Scripts with defer always execute in the document order (as they go in the document).     |\n| DomContentLoaded     | Scripts with async may load and execute while the document has not yet been fully downloaded. That happens if scripts are small or cached, and the document is long enough.     | Scripts with defer execute after the document is loaded and parsed (they wait if needed), right before DOMContentLoaded     |\n\n\nSo async is used for totally independent scripts.\n\n#### Normal Execution\n![](https://i.imgur.com/PfAiiDg.png)\n\n#### With Async\n![](https://i.imgur.com/7gKch3j.png)\n\n#### With Defer\n![](https://i.imgur.com/qUYfIIl.png)\n\n#### Relation with styles\nExternal style sheets don’t affect DOM, and so DOMContentLoaded does not wait for them.\n\nSo if we have a script after the style, then that script must wait for the stylesheet to execute:\n\n```javascript=\n<link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\">\n<script>\n  // the script doesn't not execute until the stylesheet is loaded\n  alert(getComputedStyle(document.body).marginTop);\n</script>\n```\n\n#### Built in browser auto fill\nhttps://javascript.info/onload-ondomcontentloaded#built-in-browser-autofill\n\n## load\n\n### State\nthe browser loaded all resources (images, styles etc).\n\n### Event\nadditional resources are loaded, we can get image sizes (if not specified in HTML/CSS) etc.\n\n\nThe load event on the window object triggers when the whole page is loaded including styles, images and other resources.\n\n```javascript=\n<script>\n  window.onload = function() {\n    alert('Page loaded');\n\n    // image is loaded at this time\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  };\n</script>\n\n<img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&cache=0\">\n```\n\n\n## before unload/unload\n### State\nwhen the user is leaving the page.\n\n### Event\n the user is leaving: we can check if the user saved the changes and ask him whether he really wants to leave.\n \n### window.onunload\nWhen a visitor leaves the page, the unload event triggers on window. We can do something there that doesn’t involve a delay, like closing related popup windows. But we can’t cancel the transition to another page.\n\nFor that we should use another event – onbeforeunload.\n\n### window.window.onbeforeunload\nIf a visitor initiated navigation away from the page or tries to close the window, the `beforeunload` handler asks for additional confirmation.\n\n```javascript=\nwindow.onbeforeunload = function() {\n  return \"There are unsaved changes. Leave now?\";\n};\n```","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b4bfd4a89426b0b200c129a","updatedAt":"2018-09-07T03:39:22.916Z","createdAt":"2018-07-16T02:04:58.416Z","title":"Classical vs Prototypical inheritance","body":"# Classical vs Prototypical inheritance \n\nhttps://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9\n\nhttps://stackoverflow.com/questions/19633762/classical-inheritance-vs-prototypal-inheritance-in-javascript\n\nhttp://ngninja.com/posts/prototypal-vs-classical-inheritance\n\n# Classical Inheritance vs Prototypical\n\n**Classical inheritance**  Creating using `new` Operator\n\n**Prototypical inheritance** Creating using Object.create(1)\n\nExample ES6\n```javascript=\nclass Human {\n    // ...\n}\n\nclass Man extends Human {\n    // ...\n}\n\nMan johnDoe = new Man();\n\n```\n\n### Level of Abstraction\n```\n----------------------+----------------+---------------------------------------+\n| Level of Abstraction | Name of Entity |                Comments               |\n+----------------------+----------------+---------------------------------------+\n| 0                    | John Doe       | Real World Entity.                    |\n| 1                    | johnDoe        | Variable holding object.              |\n| 2                    | Man            | Class of object johnDoe.              |\n| 3                    | Human          | Superclass of class Man.              |\n+----------------------+----------------+---------------------------------------+\n```\n\n\n### prototypical inheritance\n```javascript=\nvar human = {};\nvar man = Object.create(human);\nvar johnDoe = Object.create(man);\n```\n\n### Level of Abstraction\n```\n+----------------------+----------------+---------------------------------------+\n| Level of Abstraction | Name of Entity |                Comments               |\n+----------------------+----------------+---------------------------------------+\n| 0                    | John Doe       | Real World Entity.                    |\n| 1                    | johnDoe        | Variable holding object.              |\n| 2                    | man            | Prototype of object johnDoe.          |\n| 3                    | human          | Prototype of object man.              |\n+----------------------+----------------+---------------------------------------+\n```\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f3322337a3119ec7cebc","updatedAt":"2018-09-07T03:40:34.204Z","createdAt":"2018-09-07T03:40:34.204Z","title":"Debugging ES6 to ES5","body":"# Debugging ES6 to ES5\n( Understanding Babel Conversion )\n```javascript=\nclass Human {\n    // ...\n}\n\nclass Man extends Human {\n    // ...\n}\n\nMan johnDoe = new Man();\n\n```\nUsed babel to convert es6 to es5\n```javascript=\n\"use strict\";\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Human = function Human() {\n    _classCallCheck(this, Human);\n};\n\nvar Man = function(_Human) {\n    _inherits(Man, _Human);\n\n    function Man() {\n        _classCallCheck(this, Man);\n\n        return _possibleConstructorReturn(this, (Man.__proto__).apply(this, arguments));\n    }\n\n    return Man;\n}(Human);\n\nvar johnDoe = new Man();\n```","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f5cf2337a3119ec7cebd","updatedAt":"2018-09-07T03:51:43.117Z","createdAt":"2018-09-07T03:51:43.117Z","title":"angularJS directive","body":"# angularJS directive\n\n### Custom directive\n\n\n### $scope true, false or undefined {} inside angular custom directive\n\n### 2CP( Controller, Compile, Prelink, Postlink)\n\n![](https://i.imgur.com/EmFY9id.png)\n\n### Example Code 2CP\n```htmlmixed=\n<div ng-controller=\"msg\">\n     <div message text=\"first\">\n     </div>\n</div>\n```\nin the above code message is a custom angular js directive\n```javascript=\napp.directive('message', function(){\n     return;\n})\n```\n\nmsg controller and message directive\n```javascript=\nvar app = angular.module('app', [])   ;\n\napp.controller('msg', ['$scope', function($scope){\n\n});\n\napp.directive('message', function($interpolate){\n     return {\n          //compile phase\n          compile: function(tElement, tAttributes){ //tElement is template element\n               console.log(tAttributes.text + '_in compile');\n               return {\n                    //pre linking and post linking phase will returned as part of compilation phase, but the execution will happen only happen after the controller phase \n                    //iElement= i instance\n                    pre: function(scope, iElement, iAttributes){\n                         console.log(iAttributes.text + \"_in pre \");\n                    },\n                    post: function(scope, iElement, iAttributes){\n                         console.log(iAttributes.text + \"_in post \");\n                    },\n                   \n               }\n          }\n\n          //controller phase\n     controller: function($scope, $element, $attrs){\n          console.log($attrs.text +'_in controller');\n     }\n     }\n})\n```\n\n### Naming of Controller parameters\n```javascript=\n    controller: function($scope, $element, $attrs){\n```\n\n     The `$element` and `$attrs` name should same, If it changes the injector will fail for controller\n\n### Order of execution 2CP\n![](https://i.imgur.com/TLhjDkW.png)\n\n\n### Example order of 2CP\n\n```htmlmixed=\n<html>\n   <head>\n      //angular bootstrap code\n   </head>\n   <body ng-app=\"app\">\n      <div ng-controller=\"msg\">\n      l\n      <div message text=\"first\">\n         <div message text=\"....second\">\n             <div message text=\"........third\">\n             </div>\n          </div>\n      </div>\n      </div>\n   </body>\n</html>\n```\n\n```\nfirst_in compile\n....second_in compile\n........third_in compile\nfirst_in controller\nfirst_in pre link\n....second_in controller\n....second_in pre link\n........third_in controller\n........third_in pre link\n........third_in post link\n....second_in post link\nfirst_in post link\n```\n\n\n### Real Example 2CP\n```htmlmixed=\n<html>\n     <head>\n          //angular bootstrap code\n     </head>\n     <body ng-app=\"app\">\n          <div ng-controller=\"msg\">\n              <div message text=\"{{i}}\" ng-repeat=\"i in [1,2,3,4,5]>\n                    {{i}}\n               </div>\n          </div>\n     </body>\n</html>\n```\n\n**Result**\n\n```\n1\n2\n3\n4\n5\n```\n\n\n**Console log output**\n```javascript=\n{{i}}_in compile //Compilation only once, no scope, hence {{i}}\n{{i}}_in controller \n1_in pre //scope avail\n1_in post //scope avail\n{{i}}_in controller\n2_in pre\n2_in post\n{{i}}_in controller\n3_in pre\n3_in post\n{{i}}_in controller\n4_in pre\n4_in post\n{{i}}_in controller\n5_in pre\n5_in post\n```\n\n### Real Example notes\n* compilation no scope \n* why controller prints `{{i}}_in controller`\n* interpolate function \n```javascript=\n     controller: function($scope. $element, $attrs){\n          var v = $interpolate($attrs.text)($scope);\n          //console.log($attrs.text +'_in controller');\n          console.log(v +'_in controller');\n     }\n```\n* After chaning controller function output\n```javascript=\n{{i}}_in compile\n1_in controller\n1_in pre\n1_in post\n2_in controller\n2_in pre\n.\n.\n.\netc\n```\n\n### interpolate\n\n### Applying border color in compilation\n```javascript=\ncompile: function(tElement, tAttributes){ //tElement is template element\n    tElement.css(\"border\", 1px solid red\");\n    console.log(tAttributes.text + '_in compile');\n}\n```\n![](https://i.imgur.com/8CvHL9r.png)\n\n### Which places is Changing DOM correct\nPost linkign is best place \n```javascript=\npost: function($scope, iElement, iAttributes) {\n   if (iAttributes.text === \"3\") {\n\t   iElement.css(\"border\", \"1px solid red\")\n   }\n   console.log(iAttributes.text + \"_in post \");\n},\n```\n![](https://i.imgur.com/o3WpdU7.png)\n\n### When compile phase not needed\n\n```javascript=\napp.directive('message', function($interpolate){\n    return {   \n        link: {\n                    pre: function(scope, iElement, iAttributes){\n                    },\n                    post: function(scope, iElement, iAttributes, controller){\n                    },                   \n     },\n        controller: function($scope. $element, $attrs){\n         \n        }\n    }\n})\n\n```\n\n\n### No need Pre linking phase\n```javascript=\n/only written the body of the return function of app diretive \ncompile: function(tElement, tAttributes) {\n  //post-link funciton\n  return function(scope, iElement, iAttributes, controller) {\n    \n  }\n}\n```\n\n### No need compile, pre\n```javascript=\napp.directive('message' function($interpolate){\n     //post-link function\n     return function(scope, iElement, iAttributes, controller){\n     }        \n}\n```\n\n### Priority and Terminal\nThe priority is only relevant when you have multiple directives on one element. The priority determines in what order those directives will be applied/started. \n\nhttps://stackoverflow.com/questions/15266840/how-to-understand-the-terminal-of-directive","active":true,"category":"angularjs","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f5f42337a3119ec7cebe","updatedAt":"2018-09-07T03:52:20.216Z","createdAt":"2018-09-07T03:52:20.216Z","title":"$parse, $compile, $interpolate","body":"# $parse, $compile, $interpolate\n`$parse` is used by `$interpolate` to evaluate individual expressions (name, extension) against a scope. \n\nIt can be used to both read and set values for a given expression. \n\nFor example, to evaluate the name expression one would do: `$parse('name')($scope)`\n\nto get the \"image\" value. To set the value one would do: `$parse('name').assign($scope, 'image2')`\n\n\n# Interpolation\n\n### What compiler internally uses \n    `$parse` service to evaluate strings aginst scope.d\n\n```javascript=\n    $interpolate(templateText)(object with properties);\n```\n\nExample\n```javascript=\nvar app = angular.module(\"myApp\", [\"ngSanitize\"]);\n\n    app.controller(\"myCtrl\", [\"$scope\", \"$interpolate\", function($scope, $interpolate) {\n\n      var myname = {\n        name: \"<strong>Anil Singh</strong>\"\n      };\n\n      var templateText = \"Hello my name is {{name}} !\";\n      \n      $scope.result = $interpolate(templateText)(myname);\n\n}]);\n```\n\nInterpolate function takes the first argument and  finds the interpolate markups ({{}}) and resolves agains the properties of second argument.\n\n### angularJS ng-href\n```htmlmixed=\n    <a ng-href=\"img/{{username}}.jpg\">Hello {{username}}!</a>\n\n```\n\nDuring the compilation process the compiler uses the `$interpolate` service to see if text nodes and element attributes contain interpolation markup with embedded expressions.\n\nif that is the case, the compiler adds an `interpolateDirective` to the node and registers watches on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the `normal digest cycle`.\n\n### How interpolation markups get's replaced \nIf the interpolation value is `String`\n\n1. `undefined` and `null` are converted to ''\n2. if the value is an `object` that is not a `Number`, `Date` or `Array`, `$interpolate` looks for a custom `toString()` function on the object, and uses that. \n3. if the above doesn't apply, `JSON.stringify` is used.\n\n# Compiler Service\n\n### What compiler internally uses \n    `interpolate` service to evaluate expressions agains scope\nThe `$compile` service is the service to use for compilation. Invoking `$compile` against markup will produce a function you can use to bind the markup against a particular scope\n\n\nLet's say a directive says hello to different users and takes different \n\n\n```javascript=\napp.directive(\"dynamicHello\", function($compile){\n    return{\n        link: function(scope, element){\n            var template = \"<button ng-click='doSomething()'>{{label}}</button>\";\n            var linkFn = $compile(template);\n            var content = linkFn(scope);\n            element.append(content);\n        }\n    }\n});\n\n\n\n```\n\n\n","active":true,"category":"angularjs","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f6382337a3119ec7cebf","updatedAt":"2018-09-07T03:53:28.147Z","createdAt":"2018-09-07T03:53:28.147Z","title":"Services vs Factory","body":"# Services vs Factory\n\n\n```javascript=\napp.service('MyService', function () {\n  this.sayHello = function () {\n    console.log('hello');\n  };\n});\n```\n\n## Service\n**Definition**\n`.service()` is a method on our module that takes a name and a function that defines the service. Pretty straight forward. Once defined, we can inject and use that particular service in other components, like controllers, directives and filters, like this:\n\n```javascript=\napp.controller('AppController', function (MyService) {\n  MyService.sayHello(); // logs 'hello'\n});\n```\n\n\n## Factory\n```javascript=\napp.factory('MyFactory', function () {\n  return {\n    sayHello: function () {\n      console.log('hello');\n    }\n  }\n});\n```\n**Definition**\nAgain, `.factory()` is a method on our module and it also takes a name and a function, that defines the factory. We can inject and use that thing exactly the same way we did with the service. Now what is the difference here?\n\n**Difference**\nIn Factory instead of working with `this` in the factory, we’re returning an `object literal`.\n\n> a service is a `constructor function` whereas a factory is not. Somewhere deep inside of this Angular world, there’s this code that calls `Object.create()` with the service constructor function,\n\n## Angular source code of factory and service\n\n### Factory source code\n```javascript=\nfunction factory(name, factoryFn, enforce) {\n  return provider(name, {\n    $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n  });\n}\n```\n\nIt takes the name and the factory function that is passed and basically `returns a provider` with the same name, that has a `$get` method which is our factory function\n\n### Provider\n\n whenever you ask the injector for a specific dependency, it basically asks the corresponding provider for an instance of that service, by calling the `$get()` method.\n\n```javascript=\nMyServiceProvider.$get(); //\n```\n\n### Service Source code\n```javascript=\nfunction service(name, constructor) {\n  return factory(name, ['$injector', function($injector) {\n    return $injector.instantiate(constructor);\n  }]);\n}\n```\n\nSo we can see when service is invoked it basically returns execution of a factory function, which means service is a superset of factory or service also a factory function internally.\n\nBut service not only passes the `service constructor` function. It passes a function that pass `$injector`which instantiates the constructor function as object. That's why service functions defined with `this` keyword.\n\n## Finaly what's the difference\n\n`Service` is just a constructor function\nthat will be called with 'new'\n\n`factory` returns an object\nyou can run some code before, \nSo for factory we can run predefined code \n\nSo factory runs some code before it return our object literal. That basically allows us to do some configuration stuff or conditionally create an object or not\n\nBut we can also make a service function like a factory function\n\n```javascript=\napp.service('MyService', function () {\n\n  // we could do additional work here too\n  return {\n    sayHello: function () {\n      console.log('hello');\n    };\n  }\n});\n```\n\n> So its clear that factory and services are't different, We can write a service as a factory, But not vice versa, \n\n## ES6 classes\n\nWe can write services using es6 classes\n```javascript=\nclass MyService {\n  sayHello() {\n    console.log('hello');\n  }\n}\n\napp.service('MyService', MyService);\n```","active":true,"category":"angularjs","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f6642337a3119ec7cec0","updatedAt":"2018-09-07T03:54:12.152Z","createdAt":"2018-09-07T03:54:12.152Z","title":"Buffer","body":"# Buffer\n\nhttps://medium.freecodecamp.org/do-you-want-a-better-understanding-of-buffer-in-node-js-check-this-out-2e29de2968e8\n\n\n## Buffer Class\nmechanism for `reading or manipulating streams of binary data`. The Buffer class was introduced as part of the Node.js API to make it possible `to interact with octet streams` in the context of things like `TCP streams and file system operations`\n\n## Binary Data\nBinary data and the story of `L`\n\n```javascript=\n    \"L\".charCodeAt(0) //76\n```\n\n76 is Number representation or `Character Code` or `Character Point`\n\n76 will be represented 00001100 in binary\n\n\n## Character Sets\nCharacter Sets are `already defined rules of what exact number represents each character`. We have different definitions of these rules.The very popular ones include `Unicode` and `ASCII`\n\n## Character Encoding\n how that `number should be represented in binaries`. Specifically, `how many bits to use to represent the number`. This is called Character Encoding.\n\n## Stream\n sequence of data being moved from one point to the other over time\n## Buffer\n\nThat `waiting area` is the buffer! It is a `small physical location in your computer, usually in the RAM`, where data are temporally gathered, wait, and are eventually sent out for processing during streaming\n\n## Interacting with a Buffer\n\n\n\nwe can manipulate or interact with the binary data being streamed. What kind of interaction could we possibly have with this raw binary data? The Buffer implementation in Node.js provides us\n\n```javascript=\n// Create an empty buffer of size 10. \n// A buffer that only can accommodate 10 bytes.\nconst buf1 = Buffer.alloc(10);\n// Create a buffer with content\nconst buf2 = Buffer.from(\"hello buffer\");\n// Examine the structure of a buffer\nbuf1.toJSON()\n// { type: 'Buffer', data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] }\n// an empty buffer\nbuf2.toJSON()\n// { type: 'Buffer',\n     data: [ \n       104, 101, 108, 108, 111, 32, 98, 117, 102, 102, 101, 114 \n     ] \n   }\n// the toJSON() method presents the data as the Unicode Code Points of the characters\n// Examine the size of a buffer\nbuf1.length // 10\nbuf2.length // 12. Auto-assigned based on the initial content when created.\n// Write to a buffer\nbuf1.write(\"Buffer really rocks!\") \n\n// Decode a buffer\nbuf1.toString() // 'Buffer rea'\n//oops, because buf1 is created to contain only 10 bytes, it couldn't accommodate the rest of the characters\n// Compare two buffers\n```\n\nMentioned to read about `zlib.js` library\nhttps://github.com/nodejs/node/blob/master/lib/zlib.js","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f6772337a3119ec7cec1","updatedAt":"2018-09-07T03:54:31.801Z","createdAt":"2018-09-07T03:54:31.801Z","title":"Nodejs Clustering","body":"# Nodejs Clustering\n\nA single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load.\n\nThe cluster module is a NodeJS module that contains a set of functions and properties that help us forking processes to take advantage of multi-core systems. \n\nIt is propably the first level of scalability you must take care in your node application, specifally if you are working in a HTTP server application\n\nWith the cluster module a parent/master process can be forked in any number of child/worker processes and communicate with them sending messages via IPC communication.\n\nIt is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f6a22337a3119ec7cec2","updatedAt":"2018-09-07T03:55:14.305Z","createdAt":"2018-09-07T03:55:14.305Z","title":"Script async and defer","body":"# Script async and defer\n\n![](https://i.imgur.com/0pzXeKK.png)\n\n\n# script without attributes\n![](https://i.imgur.com/J44PtBr.png)\n\n# script with async attributes\n![](https://i.imgur.com/kr5vvon.png)\n\n# script with defer attributes\n![](https://i.imgur.com/ZESbQB8.png)\n","active":true,"category":"html","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f7082337a3119ec7cec4","updatedAt":"2018-09-07T03:56:56.069Z","createdAt":"2018-09-07T03:56:56.069Z","title":"MicroService Architechture","body":"# MicroService Architechture\n\nhttps://www.youtube.com/watch?v=gfWr2_H39N0\n\n## Why microServices\n### Monolithic Architechture\n\n    - All the components are interconnec\n    - ted and interdepended,\n    - Tightly coupled software where each componenet along with it's  associtaed components must be present in order to execute or compile the code\n    \n#### Advantages\n\n    - To scale(more users or more bandwidth) run multiple instances behind a load balancer\n    - Simple to develop\n    - Easy to deploy as it is a single deployment\n#### Disadvantages\n##### Large and comple application ,\n    - It increasingly difficult the manage the application if it grows large, Because it will be difficult to understand and modify the architechture \n    - As a result development slows down and modularity breaks down.\n    - It is difficult to understand how a change will affect\n    - So quality of the code decrease\n    \n##### Slow Development\n    - Application and dev team grows it is difficult to understand and modify, \n    - Also slower IDE, which makes less productive\n    It is a obstacle to frequenct deployment, Because to change a one componenet redeploying the whole application does't make sense \n    - So it blocks continues development\n##### scalable \n    Each copy of the application will access to all of the data, which makes cahing less effective and increase memory consumption. \n    Diffirent application components will have different hardware scopes, Like one will be memory intensive another might be CPU intensive.\n    So in monolethic architechture we cannot scale each component independently\n    \n    \n##### Unstable \n    So any bug in a component might bring down entire process or application as the each compenents are interdependent \n    \n    So available of the application is low for users\n    \n##### Inflexible\n    Difficult to adopt new framework and languages\n    It would extremly expensive to rewrite the completely app to a or new framework even though the new though the new application is considerably better. So there is huge barrier to adopt to new technologies\n    \n\n### Microservice Architechture\nstructures application into collection autonomous moduled around bussiness domain,\nall the services communicate through API, each microservice focus one bussiness capability\n\nthe microservices communicate between eachother statelessly, which means each request or response is a independent transaction\n\n![](https://i.imgur.com/HHh0VCb.png)\n\neach service can have seperate codebase for each and also seperate development team, so each can be deployed independetly\n\nBecause of multiple codebase, each codebase will be small while comparing with monolethic architechture, so in case of rebuilding and deploying becomes easy when a new technology adoptation or simple bug fix,\n\nAlso they no need to follow same technology or stack or library etc,\n\n\n#### Service discoverty\nMaintain a list of services and which node they resides,\n\n#### API gateway\nEntry point for clients, The client goes to API gateway and the API gateway forward the request particular service\n\n### Features of Microservice architechure\n#### small focused\n\n#### loosely coupled\n\n#### languae neutral\nEach microservice can follow different architechture\n\n####  Bounded context\nEach microservice does't need to understand other microservice \n\n### Advantages of microservice architechture\n\n- Independent development\n- Independent Deploymenet\n- Fault Isolation\n- Mixed technology stack\n- Granular scaling\n\n\n\n","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f7242337a3119ec7cec5","updatedAt":"2018-09-07T03:57:24.294Z","createdAt":"2018-09-07T03:57:24.294Z","title":"event Emitters","body":"# event Emitters\n\n```javascript=\nconst EventEmitter = require('events');\n\nclass WithLog extends EventEmitter {\n  execute(taskFunc) {\n    console.log('Before executing');\n    this.emit('begin');\n    taskFunc();\n    this.emit('end');\n    console.log('After executing');\n  }\n}\n\nconst withLog = new WithLog();\n\nwithLog.on('begin', () => console.log('About to execute'));\nwithLog.on('end', () => console.log('Done with execute'));\n\nwithLog.execute(() => console.log('*** Executing task ***'));\n```\n**Output**\n```\nBefore executing\nAbout to execute\n*** Executing task ***\nDone with execute\nAfter executing\n```\n\n**Changing execute function alone in above code**\n```javascript=\nwithLog.execute(() => {\n  setImmediate(() => {\n    console.log('*** Executing task ***')\n  });\n});\n```\n**output**\n```\nBefore executing\nAbout to execute\nDone with execute\nAfter executing\n*** Executing task ***\n```\n\n**more redable async await based event emitter for callbacks**\n```javascript=\nclass WithTime extends EventEmitter {\n  async execute(asyncFunc, ...args) {\n    this.emit('begin');\n    try {\n      console.time('execute');\n      const data = await asyncFunc(...args);\n      this.emit('data', data);\n      console.timeEnd('execute');\n      this.emit('end');\n    } catch(err) {\n      this.emit('error', err);\n    }\n  }\n}\n```\n","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f73f2337a3119ec7cec6","updatedAt":"2018-09-07T03:57:51.607Z","createdAt":"2018-09-07T03:57:51.607Z","title":"Streams in nodejs","body":"# Streams in nodejs\n\n**streams are used to transfer data including requests to an HTTP server, opening a file, stdin, stdout, stderr etc.**\n\nStreams can be readable, writable or both. We **can connect the readable stream to a writable stream using the pipe method**\n\n**All streams are instances of event emitters** in node.js. We can get different events for data, for example  data event, error event, end event, readable event, writable event etc.\n\n## Readable stream in node.js:\n\nThe Readable stream **is a source of data** which means that data comes out of Readable stream. It will not emit data until you indicate that you are ready to receive it.\n\nReading stream can be divided into **two modes of stream** based on their data flow mechanism:\n\n**Flowing Mode**: In Flowing Mode the data is read from the system and provided to your program.\n\n**Non-Flowing Mode**:  In non-flowing mode you have to call stream.read() explicitly to get chunk of data\n\n### Examples\nGeneral use cases of Readable streams in nodejs:\n\nhttp response\nhttp request\nReading a file\nChild process\nSockets tcp, etc.\n\n### Some usefule read methods\n1.read\n`readable.read([size])`\n\nThis method is used to pull out data from source explicitly. If there is no data to transfer, it will return null. Size specifies how much data you want to read.\n\n```javascript=\nvar readable=fs.createReadStream(‘abc.txt’);\n readable.read();\n```\n 2.setEncoding\n\n `Readable.setEncoding(encoding)`\n\n You can specify the encoding scheme of the data you want to receive.Call this function if you want to get stream in strings of specified encoding instead of buffer.\n \n ```javascript=\n var readable=fs.createReadStream(‘abc.txt’);\n readable.setEncoding('utf8')\n ```\n \n 3. Resume and  Pause:\n\n`readable.resume()` and `readable.pause()`\n\n`readable.pause()` will pause the emitting of data event and correspondingly `readable.resume()` will resume emitting.\n\nBoth `(.pause() and .resume())`can be used only in flowing mode.\n \n \n \n4.Pipe:\n\n`Readable.pipe(destination,[option])`\n\n`Pipe()` method is used to transfer data from Readable stream to Writable stream.\n\n5.Unpipe:\n\n`Readable.unpipe(destination,[option])`\n\nThis method will remove the hook set up on previous pipe call.\n\nIf destination is not specified, it will remove hook set up from all pipes.\n\nLet take an example to see how pipe and unpipe works:\n\n```javascript=\nvar fs= require(‘fs’)\n \nvar readable = fs.createReadStream(‘abc.txt’);\n \nvar writable=fs.createWriteStream(‘bcd.txt’);\n \nreadable.pipe(writable);\n \nreadable.on(‘end’,function(){\n \nreadable.unpipe(writable);\n \n});\n```","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f7522337a3119ec7cec7","updatedAt":"2018-09-07T03:58:10.326Z","createdAt":"2018-09-07T03:58:10.326Z","title":"Node.js Child Processes","body":"https://medium.freecodecamp.org/node-js-child-processes-everything-you-need-to-know-e69498fe970a\n\n# Node.js Child Processes\n\nspawn(), fork(), exec(), and execFile().\n\n## Spwan\nSpawned Child Processes\nThe spawn function `launches a command in a new process` and we can use it to pass that command any arguments. For example, here’s code to spawn a new process that will execute the `pwd` command.\n\n```javascript=\nconst { spawn } = require('child_process');\nconst child = spawn('pwd');\n```\n\n## exec \n the spawn function does not create a shell to execute the command we pass into it. This makes it slightly more efficient than the exec function, `which does create a shell`\n \n The exec function has one other major difference. It buffers the command’s generated output and passes the whole output value to a callback function \n\n```javascript=\nconst { exec } = require('child_process');\n\nexec('find . -type f | wc -l', (err, stdout, stderr) => {\n  if (err) {\n    console.error(`exec error: ${err}`);\n    return;\n  }\n\n  console.log(`Number of files ${stdout}`);\n});\n```\n\nThe exec function is a good choice if you need to use the shell syntax and if the size of the data expected from the command is small. (Remember, exec will buffer the whole data in memory before returning it.)\n\nThe spawn function is a much better choice when the size of the data expected from the command is large, because that data will be streamed with the standard IO objects.\n\n\n## fork function\n The difference between spawn and fork is that a communication channel is established to the child process when using fork,\n \n Example (parent.js)\n ```javascript=\n const { fork } = require('child_process');\n\nconst forked = fork('child.js');\n\nforked.on('message', (msg) => {\n  console.log('Message from child', msg);\n});\n\nforked.send({ hello: 'world' });\n```\nchild.js\n```javascript=\nprocess.on('message', (msg) => {\n  console.log('Message from parent:', msg);\n});\n\nlet counter = 0;\n\nsetInterval(() => {\n  process.send({ counter: counter++ });\n}, 1000);\n```\n\n\nA real example is \nwhen there is compute heavy computation process request comes we can place the high computation process in new file and fork it\n\n\n```javascript=\nconst http = require('http');\nconst { fork } = require('child_process');\n\nconst server = http.createServer();\n\nserver.on('request', (req, res) => {\n  if (req.url === '/compute') {\n    const compute = fork('compute.js');\n    compute.send('start');\n    compute.on('message', sum => {\n      res.end(`Sum is ${sum}`);\n    });\n  } else {\n    res.end('Ok')\n  }\n});\n\nserver.listen(3000);\n```","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b9f2f555aa19a075ff9cdec","updatedAt":"2018-09-17T04:49:54.328Z","createdAt":"2018-09-17T04:36:37.799Z","title":"language Features","body":"# Typescript language Features\n\n# Language Features\n\nIt is `superset` of javascript\n\n## Type annotations\n\nType annotations in TypeScript are lightweight ways to record the intended contract of the function or variable\n\n```ts\nfunction greeter(person: string) {\n    return \"Hello, \" + person;\n}\n\nlet user = [0, 1, 2];\n\ndocument.body.innerHTML = greeter(user);\n```\n\nRe-compiling, you’ll now see an error:\n\n`error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'string'.`\n\nIf we call the greeter function with no parameters TypeScript will let you know that you have called this function with an unexpected number of parameters.\n\n\nAlthough there were errors, the greeter.js file is still created. You can use TypeScript even if there are errors in your code. \n\n\n## Interfaces\nIn TypeScript two types are compaitable if their internal structure is compaintable \nThis allows us to implement an `interface` just by having the shape the interface requires, `without` an explicit `implements` clause\n\n```ts\ninterface Person{\n    firstName: string;\n    lastNAme: string\n}\n\nfunction greeter(person: Person){\n    return `Hello ${person.firstName} ${person.lastName}`\n}\n\nlet user = {firstName: 'Sivashanmugam', lastName: 'Kannan'}\ndocument.body.innerHTML = greeter(user);\n\n```\n\n## Classes\nClasses and interfaces work well together, letting the user defining the right level of abstraction better.\n\nNow we are going to create `Student` Class with a `constructor` with some `Public` properties \n\n```ts\nclass Student{\n    fullName: string;\n    constructor(public firstName, public middleName, public lastName){\n        this.fullName = [ this.firstName, this.middleName, this.lastName].join(\"\");\n    }\n}\n\ninterface Person{\n    firstName: string,\n    lastName: string\n}\n\nfunction greeter(person: Person){\n    return [\"Hello\", person.firstName, person.lastName].join(\"\")\n}\n\nlet user = new Student(\"Siva\", \"Shanmugam\", \"Kannan\");\ndocument.body.innerHTML= greeter(user);\n```\n\n## Default value for a function parameter\nWe can set a default parameter value if the function parameter is not passed while invoking the function\n\n```typescript=\nfunction countdown(start, end = 0, interval = 1){\n\n}\n```\n\n## Variables with strict type\ntypeScript let you define a type which the variable going to store \n\n```javascript\nlet isDone: boolean = false;\n```\n\nIncase if I am going to store a strign value in there it will throw a error (`Type '\"siva\"' is not assignable to type 'boolean'.`)\n```javascript\nlet isDone: boolean = false;\nisDone = \"Siva\"\n```\n\n### Other supported types\n```typescript=\nlet decimal: number = 6;\nlet color: string = \"blue\";\nlet list: number[] = [1, 2, 3];\n//Array<elemType>:\nlet list: Array<number> = [1, 2, 3];\n```\n\nThere is more is there like `tuple`","active":true,"category":"typescript","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b95ebb47930760a40fa226e","updatedAt":"2018-09-17T05:17:08.296Z","createdAt":"2018-09-10T03:57:40.669Z","title":"Typescript Examples","body":"# Type Script Examples\n\n\n\n### Greeter Example \nCovers classes, Interface, typeAnnotations\n```typescript=\nclass Student{\n    fullName: string;\n    constructor(public firstName, public middleName, public lastName){\n        this.fullName = [ this.firstName, this.middleName, this.lastName].join(\"\");\n    }\n}\n\ninterface Person{\n    firstName: string,\n    lastName: string\n}\n\nfunction greeter(person: Person){\n    return [\"Hello\", person.firstName, person.lastName].join(\" \")\n}\n\nlet user = new Student(\"Siva\", \"Shanmugam\", \"Kannan\");\ndocument.body.innerHTML= greeter(user);\n```\n\n### Function parameter default value \n```typescript=\n\nfunction countdown(initial, final = 0, interval = 1) {\n    //If Here final or interval is not passed the default value is set to 0 and 1 accordingly\n}\n\ncountdown(10)\n```\n\n## Types Examples\n### Simple types\n```javascript\nlet decimal: number = 6;\nlet color: string = \"blue\";\nlet list: number[] = [1, 2, 3];\n//Array<elemType>:\nlet list: Array<number> = [1, 2, 3];\n```\n\n### tuple\ntuples allowes us to define the length of the array with each array value's type also\n```typescript\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = [\"hello\", 10]; // OK\n// Initialize it incorrectly\nx = [10, \"hello\"]; // Error\n\n\n//Doing string operation on type number\nconsole.log(x[0].substr(1)); // OK\nconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'\n```\n\n","active":true,"category":"typescript","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b9fb76f39d7f50754d4100b","updatedAt":"2018-09-18T01:32:52.534Z","createdAt":"2018-09-17T14:17:19.803Z","title":"JWT","body":"# JWT\n\nhttps://jwt.io/introduction/\n\n- Header(x)\n- Payload(y)\n- Signature (z)\n\n\nxxxxx.yyyyy.zzzzz\n\n## Header\nheader typically consists of two parts: \n- the type of the token\n- hashing algorithm being used,\n```\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\nEncode with base64\n\n## Payload\ncontains the claims.\n- registered\n- public\n- private claims.\n\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\nEncode with base64\n\n## Signature\n\n```\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n```\n\n\nThe final will be\n`\nbase64(header).base64(PAyload).base64(signature)\n`","active":true,"category":"browser","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3dc0c5519c190f74a3ded6","updatedAt":"2018-09-21T05:28:54.605Z","createdAt":"2018-07-05T06:55:01.811Z","title":"Scopes & Closures","body":"# Scopes & Closures\n\n### Scope \nIf a variable or function is accissible it is in the scope of execution context\nThere are three scopes\n\t- Local Scope\n\t- Clousure Scope\n\t- Global Scope\n\t\n### Closure Scope\n\nSimple closure\n```javascript\nfunction pam() {\n    var name = \"Pam Beesly\";\n    function setName(newName) {\n        name = newName; //Here name variable is accessible through global scope\n    }\n\tfunction displayName(){\n\t\tconsole.log(name)\n\t}\n    setName(\"Pam Halpert\");\n}\npam();\n```\n\nClosure scope from a returned function\n```\nfunction makeWorker() {\n  let name = \"Pete\";\n\n  return function() {\n    alert(name); //when this getting executed the variable `name` will be available in closure scope\n  };\n}\n\nlet name = \"John\";\n\n// create a function\nlet work = makeWorker();\n\n// call it\nwork();\n```\n\n### closure usecases\n\nClosures used to create factory functions\nAnd closures are core of functional programming\n#### Function factories\nThere are many ways to create a object, \nObject.create, {} (Object literal), new Object, and factory function\n```javascript\nfunction Employee(designation){\n\tvar dbAccess;\n\tif(designation == 'prject manager'){\n\t\tdbAccess = true;\n\t}else{\n\t\tdbAccess = false;\n\t}\n\treturn function(name){\n\t\tconsole.log(`${name} the ${designation} and dbAccess ${dbAccess}`);\n\t}\n}\nvar projectManager = Employee('project manager');\nvar ram = projectManager('Ram'); //Ram the manager and dbAccess true\nvar juniorDeveloper = Employee('Junior Developer');\nvar siva = juniorDeveloper('Siva') //Siva the Junior Developer and dbAccess false\n```\n\n### Callbacks \nWhenever IO request or Settimeout callback is executing the callback uses Closure scope to access the variables outside it's local scope.\n\n```javascript\nlet name = \"Siva\"\nsettimeout(function(){\n\tconsole.log(name) //name is accessed through closure scope here\n}, 2000)\n```","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5ba9a196b8108d0c73aac615","updatedAt":"2018-09-25T04:12:48.623Z","createdAt":"2018-09-25T02:46:46.568Z","title":"Iframe and Canvas","body":"# Iframe and canvas\n## Iframe\n\nembedded browsing context has its own `session history` and active `document` (DOM)\n\n The browsing context that contains the embedded content is called the `parent browsing context`. The `topmost` browsing context—`the one without a parent—is usually the browser window`, represented by the `Window` object.\n \n  every use of `<iframe>` within a page can cause substantial increases in the amount of memory and other computing resources required by the document overall, \n\n### Attributes\n`allowfullscreen`\n`allowpaymentrequest`\n`height`\n\nmore details available [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox \"here\")\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n\n## Canvas\n\ncanvas is an HTML element which can be `used to draw graphics using scripting` (usually JavaScript). \n\nThe canvas element is only a container for graphics. You must use JavaScript to actually draw the graphics.\n\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\n\nFor more \nhttps://www.w3schools.com/html/html5_canvas.asp\n\n\n","active":true,"category":"html","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5ba63d69c5e425077229529e","updatedAt":"2018-09-25T06:10:27.178Z","createdAt":"2018-09-22T13:02:33.227Z","title":"html-5 new things","body":"# html-5 \n\n## HTML introduction\n\nThe first web browser, Mosaic, was introduced in 1993\nthere was no \"standard\" HTML until the introduction of HTML 2.0.\n\nHTML 2.0 was first published in 1995.* HTML 3.0 was published two years later and 4.01 two years after that. HTML 4.01 has been the work horse of the net ever since.\n\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5\n\n### Doctype\n\nThe doctype for HTML5 is very simple. To indicate that your HTML content uses HTML5, \n\n```\n<!DOCTYPE html>\n```\n\n### Sematics in HTML 5\nNew html elements\n```HTML\n<section>, \n<article>, \n<nav>, \n<header>, \n<footer> \n<aside>.\n```\n\n```HTML\n <mark>\n <figure>\n <figcaption>\n <data>,\n <time>,\n <output>,\n <progress>\n <meter> \n <main>\n```\n\n### HTML audio video tags\n\nUsing HTML5 audio and video\nThe <audio> and <video> elements embed and allow the manipulation of new multimedia content.\n\n```html\nnew values for the <input> attribute type and the new <output> element.\n```\n\n### Form Imporvements\n HTML5 is the ability to validate most user data without relying on scripts. \n`Attributes`\n- type [ email, date]\n- required [ input box Cannot be empty, if empty cannot submit form]\n- pattern [validateing a input field agains regular expressions]\n- min and max [ Input field length]\n- step attribute [ Incremental value upon clicking arrow in input type number]\n- srcdoc and sandbox [ These added as new attributes for iframe to set the level of security of iframe, for more details click https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox \"here\") ]\n`Psudoclass`\n- invalid \n this will let you apply a specific style to invalid input against the format of the element.\n \n ```html\n <style>\n input:invalid {\n    border: 2px solid red;\n}\n</style>\n <input type=\"email\" value=\"supportEmail\">\n ```\n In the above code if the input does not match email formatting then it will apply invalid style\n- \n- valid\n\n\n### MATH ML\nAllowes directly embedding mathematical formula\nCurrently chrome does not support MATH ML by default, Need a polifill library.\nMATH JAX one of the polifill which enables math formulas to be rendererd on browser \nhttps://www.mathjax.org/#samples\n\n\n[ In funtoot we use MATHQUIL libarary for MATH ML support ]\n\n### Connectivity \n`Web socket`\nThe WebSocket API is an advanced technology that makes it possible to open a two-way interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.\n\nIn nodeJS `socket.io` is a library which provide web socket accessibility, \n\n\n\n\n\n","active":true,"category":"html","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5ba3922215d87e05868e966d","updatedAt":"2018-10-08T15:03:30.350Z","createdAt":"2018-09-20T12:27:14.434Z","title":"EventLoop","body":"# EventLoop\nhttps://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/\n\nhttps://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c\n\nhttps://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\n\nhttps://www.youtube.com/watch?v=PNa9OMajw9w\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Run-to-completion\n\nNode.js is an event-based platform\n This means that everything that happens in Node is the reaction to an event\n \n Libuv is the library that provides the event loop to Node.js\n \nSomething about the article\n> I work for Dynatrace, a performance monitoring vendor and when we approached the topic of event loop monitoring, we put a lot of effort into properly understanding what we are actually measuring.\n\n> In this article I will cover our learnings about how the event loop really works and how to monitor it properly.\n\n","active":true,"category":"node","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5bbc8b6113d2d90583d45633","updatedAt":"2018-10-10T06:28:40.773Z","createdAt":"2018-10-09T11:05:05.196Z","title":"digest, apply, watch, watchGroup, watchCollection","body":"# $digest, $apply, $watch, $watchCollection, $watchGroup\n\n### digest Cycle\nAngular's digest cycle can be called on any scope object (be it rootScope or a child scope in a controller). \n\nWhen `$scope.digest()` gets called, Angular goes through all of the watchers that have been registered in the current scope and any child scopes. For each watcher, if the watched value has changed since the previous digest cycle, the watcher's listener function gets called. If the watched value has not changed, Angular simply moves on to the next watcher in the list. You may see this process referred to as dirty checking.\n\nAfter Angular reaches the last watcher that has been registered in the scope, the digest cycle is not quite done. Angular runs through all of the watchers again to see if any changed values in the first journey through the list of watchers has caused any other watched expressions to change. Angular will continue running through the list of watchers up to 10 times. If it finds that no values have changed, the digest cycle is complete, and the DOM will be updated accordingly. If at the end of 10 trips through there are still changed values, Angular will throw an error.\n\n### how does $scope.digest() get called\nSometimes you need to manually trigger the digest cycle by calling `$scope.$apply()` (the best practice) or `$scope.digest()`\n```javascript=\nscope.$apply(function() {\n    //fire the onClick function\n    scope.$eval(attrs.myClick);\n});\n```\n\n### $apply equvalent and why it's nearly equivalent\n```javascript=\n$scope.$apply(doSomething)\n//is nearly equivalent to\n\ndoSomething();\n$scope.digest();\n```\n### $watch a function \n```javascript=\n$scope.$watch(function() { return someVal; }, function() {\n    //someCallback\n});\n```\n\nThis listener function here (someCallback) would be called any time `function() { return someVal; } `returns a value that is different than the previous one.\n\n### $watch collection\n`$watchCollection` will shallow watch the properties on a single object and notify you if one of them changes.\n```javascript=\nvar person = {\n\t'name':'jhon',\n\t'age':13,\n\t'parents':{\n\t\t'mother':'jasmine',\n\t\t'father':'ryan'\n\t}\n};\n$scope.$watchCollection('person', function(updatedPerson) {\n    //the array has been updated\n    console.log('updated array: ', updatedArray);\n});\nif any of the properties of `person` changes the watch will be triggered\n```\n\n### $watchGroup \nhowever watches a group of individual watch expressions.\n```\nvar person = 'sivashanmugam';\nvar personLoc = 'Bengaluru';\nvar personAge = 15;\n$scope.$watchGroup(['person', 'personLoc', 'personAge'] function(updatedPersonVariable) {\n    \n});\n```\nIf any changes in the any of scope variables happens then the watch listener will be triggered\n\n### $watch \n```javascript=\nvar values = ['firstName', 'lastName', 'email'];\n$scope.$watchGroup(values, function(values) {\n    //the details for the user have been updated\n});\n```","active":true,"category":"angularjs","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c09f99bafff7a1a38df9dc4","updatedAt":"2018-12-07T07:48:03.253Z","createdAt":"2018-12-07T04:39:55.438Z","title":"Functions in Four ways","body":"# Functions in Four ways\n\n1. Function Declarations\n2. Function Expressions\n3. Function Constructors\n4. Function Generators\n\nThe Syntex definition as per ECMA ( https://www.ecma-international.org/ecma-262/5.1/ )\n\n![](https://i.imgur.com/mSV8caB.png)\n\n## differnce between function expression and declaration\n\n![](https://i.imgur.com/G0rgY67.png)\n\n```javascript=\nfunction add(){} // function declaration\nvar add = function(){} // the right side of the assignment is function expression\nfunction add(function(){ // the argument of add the return value of the argument both are function expression\n\treturn function(){}\n\t```javascript=\n}())\n(function add(){})() //function expression\n```\n\n## Immedetly Invoked Function Expression  ( IIFE)\n\nExample 1\n\n```javascript=\n(function(a){return a +2 })(3) // 5\n(function(a){return a +2 }(3)) // 5\n```\n\nIn the above example we use the argument outside paranthesis in 1st example inside paranthesis in second example, Both are same, There no difference between them.\n\nThe reason why we use a paranthesis around the function expression is the javascript parser need to differentiate between function expression and function declaration\nIf we put a function expression and without any paranthesis the javascript parser will consider it as a function declaration and throw error\n\n![](https://i.imgur.com/5xgzJiM.png)\n\nExample 2 (IIFE)\n\n```javascript=\n+function(){}();\n-function(){}();\n!function(){}();\n~function(){}();\n```\n\nWe can use the unary operators to mention functions expression to the javascript parser by placing them as prefix.\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c642870cd51d7331c1730a9","updatedAt":"2019-02-14T07:13:17.229Z","createdAt":"2019-02-13T14:23:44.282Z","title":"property Descriptor","body":"# property Descriptor\n\nTo remember shortly \nWrEnCo ()\n\n## What is property descriptor in Object\nIn JavaScript, every object property is described with a property descriptor through which we can configure the following keys:\n\n### property Descriptors\n\n`configurable`\n- If set to true, the property’s descriptor can be changed and the property can be deleted. \n- If set to false, we cannot do either of these things.\n\n`enumerable`\n- If set to true, the property shows up during a for-in loop over the object’s properties (we’ll get to the for-in loop soon).\n\n`value`\n- Specifies the value of the property. Defaults to undefined.\n\n\n`writable`\n- If set to true, the property value can be changed by using an assignment.\n\n`get`\n- Defines the getter function, which will be called when we access the property. Can’t be defined in conjunction with value and writable.\n\n`set`\n- Defines the setter function, which will be called whenever an assignment is made to the property. Also can’t be defined in conjunction with value and writable.\n\n\n## Example \n```\nninja = {};\nninja.name = \"Yoshi\";\n```\n\nThe property name will configurable, enumarable, writable, value will assigned to \"Yoshi\" and get and set would be undefined.\n\n## Object.defineProperty\n![](https://i.imgur.com/dzI7V9G.png)\n\nIn the above example `name` and `weapon` will be listed down in a `for in loop`.\n\nBut the `sneaky` will not be as its property descriptor `enumarable` set to false.\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b91f2a72337a3119ec7ceba","updatedAt":"2019-03-29T05:33:06.388Z","createdAt":"2018-09-07T03:38:15.073Z","title":"forEach, map, reduce, Filter, every,some, find","body":"# forEach, map, reduce, Filter, Every, Some, Find\n\n## forEach\nForeach takes a callback function and run that callback function on each element of array one by one.\n```javascript=\nvar sample = [1, 2, 3];\n// es5\nsample.forEach(function (elem, index){\n   console.log(elem + ' comes at ' + index);\n})\n```\n\n## filter\nfilter is that forEach just loop over the array and executes the callback but filter executes the callback and check its return value\n\n```javascript=\nvar sample = [1, 2, 3] // yeah same array\n// es5\nvar result = sample.filter(function(elem){\n    return elem !== 2;\n})\n\nconsole.log(result) //[1,3]\n```\n## map\n makes it unique is it generate a new array based on your existing array.\n \n```javascript=\nvar sample = [1, 2, 3] // i am never gonna change Boo! Yeah\n// es5\nvar mapped = sample.map(function(elem) {\n    return elem * 10;\n})\n\nconsole.log(mapped) // [10, 20, 30]\n```\n\n## reduce ( aggregating )\n\n```javascript=\nvar array = [1,2,3,4]\nvar sum = array.reduce(function(aggregate, number){\n\treturn aggregate + number\n},0)\nassert(sum === 10, 'aggregate is 10');\n```\n\n```javascript=\nvar array = [1,2,3,4]\nvar sum = array.reduce(function(aggregate, number){\n\treturn aggregate + number\n},100)\nassert(sum === 110, 'aggregate is 110');\n```\n\n```javascript=\nvar array = [1,2,3,4]\nvar sum = array.reduce(function(aggregate, number){\n\treturn aggregate + '--' +number\n},'siva')\nassert(sum === 'siva--1--2--3--4', 'aggregate return string');\n```\n\n\n## every and some ( returns Boolean )\n\n```javascript=\nvar ninjas = [\n{ name : 'katana', weapon : 'katana' }\n{ name : 'shinchan' },\n{ name : 'naruto', weapon: 'needle' }\n];\n\nvar allNinjasAreNamed = ninjas.every(function(ninja){\n\t'name' in ninja;\n})\n\nvar allNinjasAreArmed = ninjas.every(function(ninja){\n\t'weapon' in ninja;\n})\nassert(allNinjasAreNamed, 'All the ninjas are named');\nassert(!allNinjasAreArmed, 'Not all the ninjas armed');\n\nvar someNinjasAreArmed = ninjas.some(function(ninja){\n\t'weapon' in ninja\n})\nassert(someNinjasAreArmed, 'Some ninjas are armed');\n```\n\n## find \n```javascript=\nvar ninjas = [\n{ name : 'goku', weapon : 'katana' }\n{ name : 'shinchan' },\n{ name : 'naruto', weapon: 'needle' }\n];\n\nvar result = ninjas.find(function(ninja){\n\tninja.weapon = 'needle';\n})\nassert(ninja.name === 'goku', 'goku is weapon katana');\n```\n\n## findIndex\n```javascript=\nvar ninjas = [\n{ name : 'goku', weapon : 'katana' }\n{ name : 'shinchan' },\n{ name : 'naruto', weapon: 'needle' }\n];\n\nvar result = ninjas.findIndex(function(ninja){\n\tninja.name = 'shinchan';\n})\nassert(result === 1, 'Shinchan is sitting at 1st index')\n\n```\n\n## sort\n```javascript=\nvar array = [5,3,1,2,4];\narray.sort(function(a,b){\n\treturn a-b;\n})\nconsole.log(array) // [1,2,3,4,5]\n```\n\n- If a callback returns a value less than 0, then item a should come before item b.\n- If a callback returns a value equal to 0, then items a and b are on equal footing (as far as the sorting algorithm is concerned, they’re equal).\n- If a callback returns a value greater than 0, then item a should come after item b.\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c7534096ead303a5417958b","updatedAt":"2019-02-26T12:42:46.167Z","createdAt":"2019-02-26T12:41:45.599Z","title":"proxy","body":"# proxy\nIt is introduced in es6\n\n```javascript=\nvar emporer = {\n\t'name' : 'Siva'\n}\nvar representative = new Proxy(emporer, {\n\tget:(target, key){\n\t\tconsole.log('Accessing through proxy');\n\t\treturn key in target ? target[key] : 'Dont bother Emporer'\n\t}\n\t\n\tset: (target, key, value){\n\t\tconsole.log('Setting value of through proxy')\n\t\ttarget[key] = value;\n\t}\n})\nconsole.log(emporer.name) //'Siva'\nconsole.log(representative.name) //Accessing through proxy //Siva\nconsole.log(representative.nickName) // Dont bother Emporer\nrepresentative.nickName = 'Kannan'; // Setting value through proxy\n\n```\n\nIn the above example we have only gone through two traps\n`get` and `set` traps. But there are more traps like `apply` which will be applied when caling a function.\n`enumarate` trap will be called during `for in` loop\n`getPrototypeOf` and `setPrototypeOf` Will be invoked when setting or getting prototype object.\n\nSome functions and conditions which cannot be trapped in proxy `instanceOf` and `typeOf`. \n\n#### Usecase of proxy \n##### 1 ( Making loggin easier for functions )\n![](https://i.imgur.com/eYyCRfr.png)\n\n##### 2 ( Evaluating Performence of a function )\n![](https://i.imgur.com/MLPOmUu.png)\n\n##### 3 ( Negative Index of a function )\nAccessing values through Negative index is a regular thing in Python, Ruby, Pearl. But in javascript with the help of Proxy we can implement it.\n\n![](https://i.imgur.com/4aQs2hS.png)\n\n##### 4 ( Auto Populating Properties )\n```javascript=\nconst rootFolder = new Folder();\nrootFolder.ninjasDir = new Folder();\nrootFolder.ninjasDir.firstNinjaDir = new Folder();\nrootFolder.ninjasDir.firstNinjaDir.ninjaFile = \"yoshi.txt\";\n```\n![](https://i.imgur.com/UAIc66J.png)\n\n#### Performence measurement of proxies\nIn the below code we can see the time difference ratio of accessing array through direct object and proxy object\n```javascript=\nfunction measure(items){\n\tvar startTime = new Date();\n\tfor(var i = 0;i < 500000;i++){\n\t\titems[0] === 'siva';\n\t\titems[1] === 'shanmugam';\n\t\titems[2] === 'karthi';\n\t}\n\treturn new Date() - startTime;\n}\n\nconst name = ['siva', 'shanmugam', 'karthi']\nvar nameProxy = new Proxy(name, {\n\tget: function(target, index){\n\t\treturn target[index]\n\t},\n\tset : function(target, index, value){\n\t\treturn target[index] = value;\n\t}\n})\nMath.round(measure(nameProxy) / measure(name)) // 20 ( Will return different values in different browsers and differnt time )\n```\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5cc0037b154f4f36d0e57c5d","updatedAt":"2019-04-24T09:30:42.124Z","createdAt":"2019-04-24T06:34:35.988Z","title":"Metadata reflection","body":"#Metadata reflection\nhttp://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-4\n\nIn this post we will learn about:\n\n1. Why we need reflection in JavaScript?\n2. The metadata reflection API\n3. Basic type serialization\n4. Complex type serialization\n\n\n## 1. Why we need reflection in JavaScript?\nThe name `reflection` is used to describe code which is able to inspect other code in the same system\n\n##### Use cases ( no cluse what are each now ) \nReflection is useful for a number of use cases (Composition/Dependency Injection, Run-time Type Assertions, Testing).\n\nOur JavaScript applications are getting bigger and bigger and we are starting to need some tools\n\n### What reflection is allows to examine\nA powerful reflection API should allow us to examine an unknown object at run-time and find out everything about it.\n\n1.The name of the entity.\n2.The type of the entity.\n3.Which interfaces are implemented by the entity.\n4.The name and types of the constructor arguments of the entity.\n5.The name and types of the constructor arguments of the entity.\n\n##### Some basic javascript reflection\n\nIn JavaScript we can use functions like `Object.getOwnPropertyDescriptor()` or `Object.keys()` to find some information about an entity but we need reflection to implement more powerful development tools\n\n## 2.The metadata reflection API\nWe must use it with TypeScript 1.5 and the `compiler flag emitDecoratorMetadata`\n\nWe also need to including a reference to `reflect-metadata.d.ts` and load the `Reflect.js` file\n\n\nHow to get metadata info\n##### 1.Type metadata uses the metadata key `design:type`\n\n```javascript\n function logType(target : any, key : string) {\n      var t = Reflect.getMetadata(\"design:type\", target, key);\n      console.log(`${key} type: ${t.name}`);\n}\n\t\nclass Demo{ \n      @logType // apply property decorator\n      public attr1 : string;\n    }\n\n// output : attr1 type: String\n\n```\n\n##### 2.parameter type metadata uses the metadata key `design:paramtypes`.\n```javascript=\n function logParamTypes(target : any, key : string) {\n \tvar types = Reflect.getMetadata(\"design:paramtypes\", target, key);\n \tvar s = types.map(a => a.name).join();\n \tconsole.log(`${key} param types: ${s}`);\n }  \n\t\n class Foo {}\n interface IFoo {}\n\nclass Demo{ \n\t@logParameters // apply parameter decorator\n\tdoSomething(\n\tparam1 : string,\n\tparam2 : number,\n\tparam3 : Foo,\n\tparam4 : { test : string },\n\tparam5 : IFoo,\n\tparam6 : Function,\n\tparam7 : (a : number) => void,\n\t) : number { \n\treturn 1\n\t}\n}\n\n// output :   doSomething param types: String, Number, Foo, Object, Object, Function, Function\n```\n\n##### 5.Return type metadata uses the metadata key `design:returntype`.\n\n```javascript\nReflect.getMetadata(\"design:returntype\", target, key);\n```\n\n### 3.Basic Type serialization\n- In the above parameter type metadata example we can able to see `IFoo` and Object literal `{ test : string}` are serialized as object. \n\n- because TypeScript only supports basic type serialization \n\nBasic serialization rules\nnumber serialized as Number\nboolean serialized as Boolean\nany serialized as Object\nvoid serializes as undefined\nArray serialized as Array\nIf a Tuple, serialized as Array\n\n\n\n\n\n\n\n\n\n\n\n","active":true,"category":"ts","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5bbae999d5e14015eb90ed0c","updatedAt":"2019-02-12T11:07:40.336Z","createdAt":"2018-10-08T05:22:33.137Z","title":"Promise","body":"# Promise\n\nMy own promise impelementation\nhttps://github.com/shivashanmugam/js-lab/blob/master/promiese-implementation/promise.js\n\n```\nA Promise is an object representing the eventual completion or failure of an asynchronous operation.\n```\n\n## Promise Example\n```javascript=\nvar timeOutIn = 1000; //1 second\nvar sPromise = new Promise(function(resolve, reject){\n\tsetTimeout(function(){\n\t\tif(Math.floor(Math.random() * 100) % 2 == 0){\n\t\t\tresolve('SUCCESS')\n\t\t}else{\n\t\t\treject('ERR')\n\t\t}\n\t}, timeOutIn)\n})\n```\n\n## States\nPromise has three states basically\n- pending\n- fulfilled\n- rejected\n\n`pending` is when the asyncronous event is not yet finished (neither rejected nor resolved),  If the above code example if we increase `timeOutIn` value to `15` seconds and if we check the `sPromise` Object before 15 seconds exceed, the status of the `sPromise` will be `pending`.\n![](https://imgur.com/b0b6155d-c458-4959-aa87-ff6166c6860f)\n\n\nafter executing the promise and if it is resolved the value of `sPromise`\n![](https://i.imgur.com/S4E9mzA.png)\n\nafter executing the promise if the promise is rejected it will throw an error if there is no catch\n\n![](https://i.imgur.com/U8yTJlO.png)\n\nNow Lets attach a event for then Property for a resolved promise \n### then property of promise \n```javascript=\nvar successCallBack = function(resolvedData){\n\tconsole.log('The resolved Value is ' + resolvedData)\n}\nsPromise.then(successCallBack);  //The resolved Value is SUCCESS\n```\n\n### catch property of promise \nNow lets attach a catch function for a failed callback\n```javascript=\nsPromise.catch(function(rejectedData){\n\tconsole.log(`rejected Data is ${rejectedData}`);\n})\nrejected Data is ERR\n```\n\n### finally property of promise\nFinally is a property which is used to do some processing regardless of the outcome,\n\n```javascript=\nsPromise.finally(function(){\n\tconsole.log(`finally the promise is over, Let's do something irrespective whether it failed of success`);\n\tconsole.log('Eat pizza');\n})\n```\n\n## Chained Promises\n As the `Promise.prototype.then()` and `Promise.prototype.catch()` methods return promises, they can be chained.\n\n![](https://mdn.mozillademos.org/files/15911/promises.png)\n\nLet's take an example to understand promise chain\n```\nvar firstPromise = new Promise(function(resolve, reject){\n\tsetTimeout(function(){\n\t\tresolve('SUCCESS')\n\t}, 10000)\n})\n\nvar anotherPromise = sPromise.then(function(data){\n\treturn 'this string will go as a resolved value of a promise'\n})\n```\n\nHence it's clear that inside then function the return value is a promise;\n```\nvar firstPromise = new Promise(function(resolve, reject){\n\tsetTimeout(function(){\n\t\tresolve('SUCCESS')\n\t}, 10000)\n})\nfirstPromise.then(function(data){\n\treturn 'this string will go as a resolved value of a promise'\n}).then(function(data){\n\tconsole.log('from finside chained promise');\n\tconsole.log(data)\n})\n```\nSo we can write code like below \n\nIf the print the `anotherPromise` \n![](https://i.imgur.com/9c1gxT0.png)\n\n## Promise.all\nReturns a promise that either fulfills when all of the promises in the iterable argument have fulfilled or rejects as soon as one of the promises in the iterable argument rejects.\n\n## Promise.race \nReturns a promise that fulfills or rejects as soon as one of the promises in the iterable fulfills or rejects\n\n## Promise syncronous event\n```\nvar value = new Promise(function(resolve, reject){\n\tresolve(42);\n})\n```\nIf we print value it will show\n`Promise {<resolved>: 42}`\n\n\n## Promise.all\nIn the below code p2 is not a return of promise resolve, But \n\nSyntax\n```\nPromise.all(iterable);\n```\n\nAn iterable object such as an Array or String.\n\n>An already resolved Promise if the iterable passed is empty.\n\n```javascript=\nvar p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'foo');\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n  console.log(values); // [3, 1337, \"foo\"] \n});\n```\n> If the iterable contains non-promise values, they will be ignored, but still counted in the returned promise array value \n\nThat's why when values got printed `1337` also got printed.\n\n## Promise.race\n\nThe Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects,\n\n```\nvar promise1 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 500, 'one');\n});\n\nvar promise2 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 100, 'two');\n});\n\nPromise.race([promise1, promise2]).then(function(value) {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});\n```\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3f9d68cd8e5b1830a670fd","updatedAt":"2018-12-10T07:57:03.087Z","createdAt":"2018-07-06T16:48:40.433Z","title":"Use Strict","body":"# Use Strict\n\n### What becomes strict\nIn the below case `print` & `tell` both executes in strct mode,\n```js\n\"use strict\"\n\nfunction print(val){\n    console.log(val);\n}\n\nfunction tell(val){\n    alert(val);\n}\n```\n\n\"use strict\"\nIn the below case only print function executes under strict mode\n```js\nfunction print(val){\n\t\"use strict\"\n    console.log(val);\n}\n\nfunction tell(val){\n    alert(val);\n}\n```\n### Undeclared variable\n```js\n\"use strict\"\na = 12; //this throws exception in strict mode. In non-strict mode a new property for window object is created.\n```\n### Delete Operator\nDelete operator is used to delete user defined object properties and array elements. If we try to delete anything other than user defined object properties or array elements we get an exception\n\n```js\nvar a = 78;\ndelete a; //throws exception in strict mode. In non strict mode it returns false and program continues. 'a' is treated as a global variable not as an property of window object in both modes, so property operations are not allowed in variable a.\ndelete window.a; //throws exception in strict mode. In non strict mode it returns false and program continues.\n\n\nwindow.b = 34;\ndelete window.b; //In both modes property b is deleted.\n\n\ndelete Math.PI; //In strict mode it returns Error as PI is pre defined. In strict mode exception is thrown.\ndelete Object.prototype; //deleting an undeletable\nproperty in non-strict mode returns false. But in strict mode exception is thrown.\n\n```\n\n\n### Duplicate property names\nWhen using the same name for your properties, the second property will overwrite the first.\n```\nvar a = {x: 1, x: 2};\nconsole.log(a); // {x: 2}\n```\nBut under Strict mode this will be considered as a error \n\n```\nfunction haveES2015DuplicatePropertySemantics() {\n  'use strict';\n  try {\n    ({prop: 1, prop: 2});\n\n    // No error thrown, duplicate property names allowed in strict mode\n    return true;\n  } catch(e) {\n    // Error thrown, duplicates prohibited in strict mode\n    return false;\n  }}\n```\n### Modifing non-writable property in strict mode\nWhile the world waits for ES6 to finally arrive with the desired const statement, non-writable properties are the most similar thing to a constant that we have in Javascript. Once its value is defined, it is not possible to change it using assignments\n```\nvar ob = {a: 1};\n \nObject.defineProperty( ob, 'B', {value: 2, writable:false} );\n \nob.B; // => 2\n \nob.B = 10;\n \nob.B; // => 2\n\nn strict mode, trying to modifying a non-writable property would throw an TypeError exception:\n\nfunction updateB(){\n  'use strict';\n  ob.B = 4; // This would throw an exception\n}\n \nupdateB(); // Throws the exception. I told you.\n```\n\n### duplicate Parameter names\n```js\nfunction print(value, value) {} //throws exception.\n```\n\n### Octal numeric literals and escape character not allowed\n```js\nvar testStrict = 010;  // throws exception\nvar testStrict = \\010; // throws exception.\n```\n\n\n### eval and arguments\n```js\nvar eval = 12; //In non-strict mode eval is overwritten. Exception thrown in strict mode.\nvar arguments = 12;//Same behavior as above.\n```\n\n### Reserved Keywords\n```js\nReserved keywords are:\n\nimplements\ninterface\npackage\nprivate\nprotected\npublic\nstatic\nyield\n```\n\n```js\n\"use strict\"\n var private = 12; //in non-strict mode this is allowed. In strict mode this throws an exception.\n```\n### This inside global functions\n```\n\"use strict\"\nfunction checkforthis(){\nconsole.log(this); //will print undefined.\n}\ncheckforthis();\n```\n\n### Creating variables using eval\n```\n\"use strict\"\neval(\"var q = 12\");\nconsole.log(q); //throws exception. q is not defined.\n```\n\n### Removes Alias behaviour between functions arguments and function parameter\n\nLet's See first the normal javascript behaviour, In the below example name and anotherName are not a value reference as `name` variable hold string value. Only for objects references will be created.\n```javascript=\nvar name = 'karthi'\nvar anotherName = name;\nname = 'siva'\nconsole.log(anotherName) //karthi\n\nvar cat = { name : 'blossom' }\nvar anotherCat = cat;\ncat.name = 'spring';\nconsole.log(anotherCat.name) //spring\n```\n\n( `Alias Behaviour` )In the below example eventhough name and arguments[0] hold string value they still refer the same value, Hence if we change anyone the other will get affected \n```javascript=\nfunction printName(name){\n\tconsole.log(`name: ${name} and arguments[0] : ${arguments[0]}`) \n\tname = 'new Karthi'\n\tconsole.log(`${arguments[0]}`) // new Karthi\n}\nprintName('siva')\n```\n\nAs we had seen the above example is a contradict behaviour of javascript, To prevent this behaviour we need to use `use strict`\n```javascript=\nuse strict;\nfunction printName(name){\n\tconsole.log(`name: ${name} and arguments[0] : ${arguments[0]}`) \n\tname = 'new Karthi'\n\tconsole.log(`${arguments[0]}`) //siva\n}\nprintName('siva')\n```\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c62aa920aed072c04f45ab8","updatedAt":"2019-02-13T11:17:46.379Z","createdAt":"2019-02-12T11:14:26.269Z","title":"Generator Function","body":"# Generator Function\n\nThey’re especially good for working with multiple asynchronous steps\n\nBefore we see fully about generator function let's understand a scenario why and when we need a generator function\n\n### Pseduo Scenario \nWe need to get first ninja's mission details, The below pseduo code has a psedo syncGetJSON ( a non-existing syncronouse function to read a JSON file).\n```\ntry {\n   var ninjas = syncGetJSON(\"ninjas.json\");\n   var missions = syncGetJSON(ninjas[0].missionsUrl);\n   var missionDetails = syncGetJSON(missions[0].detailsUrl);\n   //Study the mission description\n}\ncatch(e){\n  //Oh no, we weren't able to get the mission details\n}\n```\nJavascript cannot be blocked as it is single threaded.\n\n### Let see actual Implementation of the Psedo-scenario in javascript\n\n```javascript=\ngetJSON(\"ninjas.json\", function(err, ninjas){\n  if(err) {\n    console.log(\"Error fetching list of ninjas\", err);\n    return;\n  }\n  getJSON(ninjas[0].missionsUrl, function(err, missions) {\n    if(err) {\n      console.log(\"Error locating ninja missions\", err);\n      return;\n    }\n  getJSON(missions[0].detailsUrl, function(err, missionDetails){\n    if(err) {\n      console.log(\"Error locating mission details\", err);\n      return;\n    }\n    //Study the intel plan\n    });\n  });\n});\n```\n\nThis code creates a callback hell and it's difficult to understand straight forward.\n\n### Generator Function\nIt is defined by putting a asterick right after the function  keyword.\n\nWe can also use the yield keywords in generator function\n```javascript=\nasync (function *(){\ntry{\n\tconst ninjas = yield getJSON(\"ninjas.json\");\n\tconst missions = yield getJSON(ninjas[0].missionsUrl);\n\tconst missionDescription = yield(missions[0].detailsUrl);\n}\ncatch(e){\n\t//oh no, we were't able to get the mission details.\n}\n})\n```\n\n#### The theory definition\nA generator is a function that generates a sequence of values, but not all at once, as a standard function would, but on a per request basis. \n\nWe have to explicitly ask the generator for a new value, and the generator will either respond with a value or notify us that it has no more values to produce.\n\nafter a value is produced, a generator function doesn’t end its execution, as a normal function would. Instead, a generator is merely suspended.\n\n#### the example\n\n```javascript=\nfunction WeaponGenerator(){\n\tyield \"Katana\";\n\tyield \"Wakizashi\";\n\tyield \"Kasarigama\";\n\t\n}\n```\n\n#### Consuming WeaponGenerator Example 1 \n```javascript=\nfor(let weapon of WeaponGenerator()) {\n  assert(weapon, weapon);\n}\n```\n\n#### Controlling generator function through iterator object\n\nMaking a call to a generator doesn’t mean that the body of the generator function will be executed. Instead, an iterator object is created, an object through which we can communicate with the generator\n\nSee the below self explainable image\n![](https://i.imgur.com/J8uTEPu.png)\n\n#### Generator function and while loop\n![](https://i.imgur.com/8RgxZti.png)\n\n#### Generator function delegation\nBy using the yield* operator on an iterator\n![](https://i.imgur.com/ACgx3nN.png)\n\nOutput\n```\n\"Sun Tzu\"\n\"Hattori\"\n\"Yoshi\"\n\"Genghis Khan\"\n```\n\n### Use case 1 ( Generating Unique Identifiers Using Generator Function)\n\n#### requirement\nWhen creating certain objects, often we need to assign a unique ID to each object.\n\n#### The normal way\nThe easiest way to do this is through a global counter variable\n\n#### The problem in the normal way\nthat’s kind of ugly because the variable can be accidently messed up from anywhere in our code. \n\n#### The generator way\n```javascript=\nfunction *idGenerator(){\n\tvar i = 1;\n\twhile(1){\n\t\tyield i++;\n\t}\n}\n\nvar idIterator = idGenerator();\nconst ninja1 = { 'id' : idIterator.next().value } // {id:1}\nconst ninja1 = { 'id' : idIterator.next().value } // {id:2}\nconst ninja1 = { 'id' : idIterator.next().value } // {id:3}\n```\n\n#### The closure Way\n```javascript=\nfunction idGeneratorConstructor(){\n\tvar id = 1;\n\treturn function(){\n\t\treturn id++;\n\t}\n}\nvar idGenerator = idGeneratorConstructor();\nconst ninja1 = { 'id' : idGenerator() } // {id:1}\nconst ninja1 = { 'id' : idGenerator() } // {id:2}\nconst ninja1 = { 'id' : idGenerator() } // {id:3}\n```\n\n### Use case 2 - ( DOM Traversal )\nThe general way \n![](https://i.imgur.com/XWJspRQ.png)\n\nUnderstand the DOM Traversal and make it better using Generator functions.\nDONT SEE THE ANSWER\n.\n.\n.\n.\n.\n![](https://i.imgur.com/HsltF51.png)\n\n\n## Communicating with generator Function\nSo far we have seen generator returning multiple values.\n\n### Two Way communication\nWe can also send data to a genarator, there by acheiving two way communication.\n\nA example to understand it\n![](https://i.imgur.com/WtXXQfw.png)\n\n#### Throwing exceptions into generator in two way communication\n![](https://i.imgur.com/hkPE5r2.png)\n\nInstead of calling next with iterator, just need to call iterator.throw()\n\n### Exploring Generators under the Hood\nLike promise generator also has multiple execution states\n\n- Suspended start\nGenerator is created, But no code Executed\n- Executing\n\n- Executing\nCode of the generator is getting executed either from start or from last suspended state.\n\n- Suspended yield\nWhen a generator reaches yield expression it creates a object carring the return value and suspends the execution. \n\n- Completed\nIf the generator returns or runs out of code to execute, it moves to completed state.\n\nA diagram expalining the states of execution.\n\n![](https://i.imgur.com/Wgg9QSj.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b3ef491cf77a41d2092a911","updatedAt":"2019-02-14T04:37:52.385Z","createdAt":"2018-07-06T04:48:17.528Z","title":"Inheritance","body":"# Inheritance \n\nhttps://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f\n\n\n### Portion 1 (METHOD 1)\n```js\n//SuperType constructor function\nfunction SuperType(){\n\tthis.name = \"Virat\"\n}\n\n//SuperType prototype\nSuperType.prototype.getSuperName = function(){\n\treturn this.name\n}\n\n//SubType prototype function\nfunction SubType(){\n\tthis.age = 26\n}\n\n//Inherit the properties from SuperType\nSubType.prototype = new SuperType();\n```\n\n\n### Portion 2 (METHOD 1)\n```js\n//Add new property to SubType prototype\nSubType.prototype.getSubAge = function(){\n\treturn this.age;\n}\n\n//Create a SubType object\nvar subTypeObj = new SubType();\nconsole.log(subTypeObj.name); //Output: Virat\nconsole.log(subTypeObj.age); //Output: 26\nconsole.log(subTypeObj.getSuperName()); //Output: Virat\nconsole.log(subTypeObj.getSubAge()); //Output: 26\n```\n\n### The problem in the Method 1\nBefore we going in to the problem lets reiterate the basics\n```\nfunction Person(){\n\n}\nconsole.log(Person.prototype)\n```\nEvery function will contain `prototype` property\nEvery prototype property will contain a `constructor` property\n\nThe `constructor` will point to function Object where the prototype property live.\n\nAlso if we create a instance through the function Constructor for example\n```\nfunction Person(){\n\tthis.dance = true;\n}\nvar siva = new Person();\nconsole.log(siva instanceOf Person) //true\n```\n\n#### Now lets take the method 1 and discuss the problem\nIn the method 1 code the subTypeObj will lose it's access to actual Constructor\n\n```\nconsole.log(subTypeObj instanceOf SubType) //false\nconsole.log(subTypeObj instanceOf SuperType) //true\n```\n\n#### How to overcome the problem we face in method 1\nBefore go to the solution do a rewind of `Object.defineProperty`. More details available in note called `property Descriptor`.\n\n```\nSubType.prototype = new SuperType();\n```\n\nAfter assigning the new instance of SuperType function constructor, Again over-ride the right constructor object through `Object.defineProperty` function\n\n```javascript=\nSubType.prototype = new SuperType();\nObject.defineProperty(SubType.prototype, 'constructor', {\n\tconfigurable : false,\n\tenumarable : false,\n\twritable: true,\n\tvalue : SubType\n})\nvar subTypeObj = new SubType();\nconsole.log(subTypeObj instanceof SubType) //true\n```\n\n\n\n### Portion 1 (Method 2)\n```js\n//SuperType constructor function\nfunction SuperType(firstName, lastName){\n\tthis.firstName = firstName,\n\tthis.lastName = lastName,\n\tthis.friends = [\"Ashwin\", \"Jadeja\"]\n}\n\n//SuperType prototype\nSuperType.prototype.getSuperName = function(){\n\treturn this.firstName + \" \" + this.lastName;\n}\n\n//SubType prototype function\nfunction SubType(firstName, lastName, age){\n\t//Inherit instance properties\n\tSuperType.call(this, firstname, lastName);\n\tthis.age = age;\n}\n```\n\n### Portion 2 (Method 2)\n```js\n//Inherit methods and shared properties\nSubType.prototype = new SuperType();\n\n//Add new property to SubType prototype\nSubType.prototype.getSubAge = function(){\n\treturn this.age;\n}\n\n//Create SubType objects\nvar subTypeObj1= new SubType(\"Virat\", \"Kohli\", 26);\nvar subTypeObj2 = new SubType(\"Sachin\", \"Tendulkar\", 39);\n\n//Modify the friends property using the subTypeObj1\nsubTypeObj1.friends.push(\"Amit\");\n\nconsole.log(subTypeObj1.friends);//[\"Ahswin\", \"Jadega\", \"Amit\"]\nconsole.log(subTypeObj2.friends);//[\"Ashwin\", \"Jadega\"]\n\n//subTypeObj1\nconsole.log(subTypeObj1.firstName); //Output: Virat\nconsole.log(subTypeObj1.age); //Output: 26\nconsole.log(subTypeObj1.getSuperName()); //Output: Virat Kohli\nconsole.log(subTypeObj1.getSubAge()); //Output: 26\n\n//subTypeObj2\nconsole.log(subTypeObj2.firstName); //Output: Sachin\nconsole.log(subTypeObj2.age); //Output: 39\nconsole.log(subTypeObj2.getSuperName()); //Output: Sachin Tendulkar\nconsole.log(subTypeObj2.getSubAge()); //Output: 39\n```\n\n### Method 3\n```javascript=\nvar ironman = {'intelligent': true};\nvar spiderman = {'jumphigh': true};\nconsole.log('intelligent' in spiderman) // false\nObject.setPrototypeOf(spiderman, ironman) \nconsole.log('intelligent' in spiderman) // true\n```\n`spiderman` before and after applying of\n```\nObject.setPrototypeOf(spiderman, ironman) \n```\nBEFORE\n![](https://i.imgur.com/6cWyhC4.png)\n\nAFTER\n![](https://i.imgur.com/6cWyhC4.png)\n\nLet's add 'hulk'\n```javascript=\nvar hulk = { 'strong' : true };\nObject.setPrototypeOf(hulk, spiderman);\n```\n![](https://i.imgur.com/oO3b3Ku.png)\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5b95f2851373b90e1a1b837a","updatedAt":"2019-03-16T16:06:31.669Z","createdAt":"2018-09-10T04:26:45.582Z","title":"ES6 features","body":"# ES6 features\n\n## Default valur for function parameter\n```javascript\nfunction greet(name, greetWith = 'Hello'){\n\tconsole.log(greetWith+' '+name);\n}\ngreet('Sergio Ramos', 'Ola');\ngreet('Harry Kane');\n````\n\n## For loop\n```javascript=\nvar names = ['john' , 'ryan', 'jack']\nfor(var name of names){\n\tconsole.log(name)\n}\n```\n\n## Template Strings\n```javascript=\nvar firstName = 'sivashanmugam';\nvar lastName = 'kannan'\nvar fullname = `${firstName} ${lastName}`;\nconsole.log(fullname) //sivashanmugam kannan\n```\n\n## Lamdas\nBy default inside a class consturctor `this` variable inside eventListners does't mention the `object instance` created\n```javascript=\nfunction Counter(el) {\n    var container = document.getElementById('container');\n    this.count = 0;\n\tel.addEventListener('click', function(event){\n\t\tthis.count += 1 //here `this`mentions global variable not the object instance\n\t\tel.innerHTML = this.count; \n\t})\n}\nnew Counter(container);\n```\n\nTo fix the `this` keyword issue inside event listner, We store the object instance inside the object instance with a variable `_this`\n```javascript\nfunction Counter(el) {\nvar _this = this;\n    _this.count = 0;\n\tel.addEventListener('click', function(event){\n\t\t_this.count += 1 //here `this`mentions global variable not the object instance\n\t\tel.innerHTML = _this.count; \n\t})\n}\n```\n\nThis conversion is now made as default in es6\n\nBut to make the conversion possible we have use ES6 arrow function instead of normal function callback syntax. Below is that\n\n```javascript\nfunction Counter(el) {\n        this.count = 0;\n        el.innerHTML = this.count;\n        el.addEventListener('click', \n            (event) => el.innerHTML = (this.count += 1))\n    }\n```\n\nBy pasting the above script in babel es6 to es5 we can see the difference.\n\n\n## Destructuring \n\n### Array\nES6 syntax\n```javascript\nvar array = [32, \"John\", true];\nvar [totalStudents, teacherName, isMale] = array;\n```\nES5 Conversion\n```javascript\nvar array = [32, \"John\", true];\nvar totalStudents = array[0],\n    teacherName = array[1],\n    isMale = array[2];\n```\n\n### Object\n\nes6\n```javascript\nfunction todoVarDecl(id){\n\tvar todo = {\n\t\t\"id\": id,\n\t\t\"name\": \"sivashanmugam\",\n\t\t\"location\": \"bengaluru\"\n\t}\n\treturn todo\n}\n\nvar {id, name, location} = todo(21);\n```\nes5\n```javascript\n\"use strict\";\n\nfunction todoVarDecl(id) {\n\tvar todo = {\n\t\t\"id\": id,\n\t\t\"name\": \"sivashanmugam\",\n\t\t\"location\": \"bengaluru\"\n\t};\n\treturn todo;\n}\n\nvar _todo = todo(21),\n    id = _todo.id,\n    name = _todo.name,\n    location = _todo.location;\n```\nDestructuring and optional parameter\nes6\n```javascript\nfunction greet({name, greetWith:greetWith = 'Hello'}){\n\tconsole.log(`${greetWith} ${name}`);\n}\ngreet('Sergio Ramos', 'Ola');\ngreet('Harry Kane');\n```\nes6\n```javascript\n'use strict';\n\nfunction greet(_ref) {\n\tvar name = _ref.name,\n\t    _ref$greetWith = _ref.greetWith,\n\t    greetWith = _ref$greetWith === undefined ? 'Hello' : _ref$greetWith;\n\n\tconsole.log(greetWith + ' ' + name);\n}\ngreet('Sergio Ramos', 'Ola');\ngreet('Harry Kane');\n```\n\n## Spread Operator\nWhen we don't how many parameters the function is going to have in that case we use spread operator\nes6\n```javascript=\nfunction calculate(action, ...values){\n\tif(action == 'add'){\n\t\tvar i = 0, total;\n\t\tfor(var i = 0;i < values.length;i++){\n\t\t\ttotal = total + values[i]\n\t\t}\n\t}\n\treturn total;\n}\ncalculate('add', 1,2,3,4,5);\n```\nes5\n```javascript=\n'use strict';\n\nfunction calculate(action) {\n\tif (action == 'add') {\n\t\tvar i = 0,\n\t\t    total;\n\t\tfor (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {\n\t\t\ttotal = total + (arguments.length <= i + 1 ? undefined : arguments[i + 1]);\n\t\t}\n\t}\n\treturn total;\n}\ncalculate('add', 1, 2, 3, 4, 5);\n```\n\n### Another example for spread\nes6\n```javascript=\nvar source = [3, 4, 5];\nvar target = [ 1, 2, ...source, 6, 7 ];\n```\n\nes5\n```javascript\nvar source = [3, 4, 5];\nvar target = [1, 2].concat(source, [6, 7]);\n```\n### Computed properties \nes6\n```javascript\nvar fruit_var = 'fruit'\nvar eatables = {[fruit_var]: 'Apple', vegetable: 'Carrot'}\n```\nes5\n```javascript=\nvar eatables = {vegetable: 'Carrot'}\nvar fruit_var = 'fruit'\neatables[fruit_var] = 'Apple'\n```\nAnother example for computed properties\n```javascript=\nconst osPrefix = 'os_';\n\nvar support = {\n    [osPrefix + 'Windows']: isSupported('Windows'),\n    [osPrefix + 'iOS']: isSupported('iOS'),\n    [osPrefix + 'Android']: isSupported('Android'),\n}\n\nfunction isSupported(os) {\n    return Math.random() >= 0.5;\n}\n```\n\n### Let and const\nBefore we discuss about its usage, We will see it's behaviour inside Block Environment, Block environment is nothing but the scope between two curly brace. \n```javascript=\n// Global Environment\nfunction Random(){\n\t//Function Environment\n\tif(){\n\t\tvar name = 'siva';\n\t\t//Block Environment\n\t}\n\tconsole.log(name) //siva\n}\n```\nIf we define the a variable with `var` keyword that variable will be defined to the nearest Function environenment or Global Environment. The block level environment ignored for variables with defined using `var`;\n\nBut if define using `let` or `const` it will be defined to the nearest Block environment and it will be accessible in function environment.\n\n```javascript=\n// Global Environment\nfunction Random(){\n\t//Function Environment\n\tif(){\n\t\t//Block Environment\n\t\tvar name = 'siva';\n\t\tlet age = 18;\n\t\tconst dob = '15-dec-1994'\n\t}\n\tconsole.log(name) //siva\n\tconsole.log(age) //undefined\n\tconsole.log(dob) //undefined\n}\n```\n\n##### Lets see How var and let workds works inside a forloop\n\n```javascript=\nvar arr = ['Red', 'Blue', 'Green']\nfor(var i =0; i < 3;i++){\n\tsetTimeout(function(){\n\t\tconsole.log(`the Value of i is ${i} and array value is ${arr[i]})\n\t})\n}\n```\nThe above example will print the below line `4` times\n```\nthe Value of i is 4 and array value is undefined \n```\nFor loop with `let`\n```javascript=\nvar arr = ['Red', 'Blue', 'Green']\nfor(let i = 0; i < 3;i++){\n\tsetTimeout(function(){\n\t\tconsole.log(`the Value of i is ${i} and array value is ${arr[i]})\n\t})\n}\n```\nResult\n```\nthe Value of i is 0 and array value is Red\nthe Value of i is 1 and array value is Blue\nthe Value of i is 2 and array value is Yellow\n```\nThe Reason being,  Upon each For loop execution a new block scope will be created and as `i` variable is defined as let, The `i` value will be created in Block Environment upon each for.\n\nSo setTimeout callback considers `i` from block scope not from function scope. \n\n##### let\nvariabled defined using let keyword can be modified even after it's declaration, It is same as `var` except it considers block environment during definition.\n\n\n##### const\non the other hand variables defined const keyword cannot be changed for Non-Objects. If we try it will throw exception.\n```javascript=\n\tconst name = 'sivashanmugam'\n\tname = 'karthi'; //THROWS EXCEPTION\n```\n\nBut for objects the behaviour is different, Only the reference of the object cannot be changed, Which means the cannot have any other object reference or Non-object value\n```javascript=\nconst studentTopper = {}\nstudentTopper.name = 'Sivashanmugam'; //WORKS FINE \nstudentTopper.name = 'Karthi'; //WORKS FINE\ndelete studentTopper.name; //WORKS FINE\n\n\nvar studentLoser = {};\nconst teacherHot = {};\nstudentTopper = studentLoser; //throws Exception \nstudentTopper = teacherHot; //throws Exception\nstudentTopper = 'karthi' //throws Exception\n```\n\n### class keyword\nWhy class keyword was introduced\n\nmany developers, especially those from a classical object-oriented background, would prefer a simplification or abstraction of JavaScript’s inheritance system into one that they’re more familiar with\n\nThis inevitably leads toward the realm of classes, even though JavaScript doesn’t support classical inheritance natively. As a response to this need, several JavaScript libraries that simulate classical inheritance have popped up. Because each library implements classes in its own way, the ECMAScript committee has standardized the syntax for simulating class-based inheritance.\n\n![](https://i.imgur.com/hL6myoh.png)\n\n### Static keyword inside Class\n```javascript=\n\tclass Ninja {\n\t\tconstructor(swordLength){\n\t\t\tthis.swordLength = swordLength;\n\t\t}\n\t\tfunction swingSword(){\n\t\t\treturn true;\n\t\t}\n\t\tstatic function compare(ninja1, ninja2){\n\t\t\treturn ninja1.swordLength - ninja2.swordLength;\n\t\t}\n\t}\n\t\n\tvar ninja1 = new Ninja(4);\n\tvar ninja2 = new Ninja(3);\n\tconsole.log(ninja1.compare) //undefined\n\tconsole.log(ninja2.compare) //undefined\n\t\n\tconsole.log(Ninja.compare(ninja1, ninja2)); //1\n\t\n\t\n```\n\n![](https://i.imgur.com/tUFl9tb.png)\n\n### Inheritance in es6 \nBefore we see the inheritance of es6, Look at the note `inheritance` which compiles the different ways of inheritance in es5\n\n![](https://i.imgur.com/673BCKg.png)\n```javascript=\nclass Person{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n\tdance(){\n\t\treturn true;\n\t}\n}\n```\n![](https://i.imgur.com/zcE6gSd.png)\n\n```javascript=\nclass Ninja extends Person{\n\tconstructor(name, weapon){\n\t\tsuper(name)\n\t\tthis.weapon = weapon;\n\t}\n\twieldWeapon(){\n\t\treturn true;\n\t}\n}\n```\n![](https://i.imgur.com/lMxRxku.png)\n\n```\nvar ninja1 = new Ninja('shiva', 'sword');\n```\n\n![](https://i.imgur.com/93WIoBk.png)\n\n\n\n### super keyword\n\n\n### Proxy\n```javascript=\nvar emporer = {\n\t'name' : 'Siva'\n}\nvar representative = new Proxy(emporer, {\n\tget:(target, key){\n\t\tconsole.log('Accessing through proxy');\n\t\treturn key in target ? target[key] : 'Dont bother Emporer'\n\t}\n\t\n\tset: (target, key, value){\n\t\tconsole.log('Setting value of through proxy')\n\t\ttarget[key] = value;\n\t}\n})\nconsole.log(emporer.name) //'Siva'\nconsole.log(representative.name) //Accessing through proxy //Siva\nconsole.log(representative.nickName) // Dont bother Emporer\nrepresentative.nickName = 'Kannan'; // Setting value through proxy\n\n```\n\nIn the above example we have only gone through two traps\n`get` and `set` traps. But there are more traps like `apply` which will be applied when caling a function.\n`enumarate` trap will be called during `for in` loop\n`getPrototypeOf` and `setPrototypeOf` Will be invoked when setting or getting prototype object.\n\nSome functions and conditions which cannot be trapped in proxy `instanceOf` and `typeOf`. \n\n### Map \nBefore jumping in to the new Map keyword, lets go back and understand why it requires in the first place,\n\n#### Using regular objects as maps and its drawbacks\n\n##### Examle - 1 dictionary\n\nImagine that somewhere on our site we need to access the translation for the word constructor, so we extend the dictionary example into the following code.\n\n![](https://i.imgur.com/F4A7rZB.png)\n\nLets say there is a word `constructor` which we forgot to define in the dictionary.\n\nSo when we try to access `dictionary['ja']['constrctor']` it is expected to return `undefined`, \n\nBut it returns `function Object() {[native Code]}`, Because every object will have a constructor property.\n\n##### Examle - 2 DOM elements maping\n\nIn this example we set an object as a property for an object, When we do that instead of the object the string will stored.\n\n```javascript=\nvar siva = { name:'sivashanmugam'}\nvar mapObjCompanies = {};\nmapObjCompanies[siva] = {workedCompanies : ['funtoot', 'higherone', 'indosakura']}\nassert(Object.keys(mapObjCompanies) === [\"[object Object]\"]);\n\n```\nAs we can see `mapObjCompanies` contains `[object Object]` as it's property, When \n\n#### Solution through Map keyword\n```javascript=\nvar ninja1 = {name:'hatori'};\nvar ninja2 = {name:'goku'};\nninjaHomeLandMap.set(ninja1, {homeLand: \"tokyo\"});\nninjaHomeLandMap.set(ninja2, {homeLand: \"herishima\"});\nassert(ninjaHomeLandMap.get(ninja1).homeLand == \"tokyo\", 'ninja1 is from tokyo')\n\n```\n![](https://i.imgur.com/VqYwGrs.png)\n```javascript=\nassert(ninjaHomeLandMap.size == 2 ,'Size is two');\nassert(ninjaHomeLandMap.has(ninja1) == true, 'Contains ninja1 in map')\nninjaHomeLandMap.delete(ninja2)\nassert(ninjaHomeLandMap.has(ninja2) == false, 'ninja2 got deleted')\n\n\n// Iterating Map Object\nfor(var item of ninjaHomeLandMap){\n  assert(item[0] !== null, \"Key:\" + item[0]);\n  assert(item[1] !== null, \"Value:\" + item[1]);\n}\n```\n\n### Set and List\n#### Set\n![](https://i.imgur.com/bNKsJzb.png)\n\n```javascript\nvar samurai = ['jackson', 'hattori'];\nvar ninja = ['siva', 'hattori'];\nvar warriors = new Set([...samurai, ...ninja, 'bahubali']);\nconsole.log(warriors) // Set(4) {\"jackson\", \"hattori\", \"siva\", \"bahubali\"}\n```\n\n### Symbols \n```javascript=\nvar symbol_1 = Symbol('symbol one');\nvar obj = {}\nconsole.log(symbol_1) //Symbole(symbol one);\nobj[symbol_1] = 'ONE'\nvar symbol_one = Symbol('symbol one');\nobj[symbol_one] = 'ஒன்று';\nconsole.log(symbol_one) //Symbole(symbol one);\n```\n\n![](https://i.imgur.com/DtMgWcP.png)\n\n#### Behaviour\n```javascript=\nvar symbol_1 = Symbol('symbol one');\nconsole.log(symbol_1) //Symbole(symbol one);\nconsole.log(symbol_1 + ' haha') // throw error\n\ntypeof symbol_1;     // \"symbol\" \n\nconst globalSym = Symbol.for('foo'); // global symbol\nconsole.log(Symbol.keyFor(globalSym));\n```\n\n\n\n#### Use case\n\n<the use cases on yet to be fully explored >\nThe use case will be described here breifly, The use he has explained is keeping track of `isMoving` property on a DOM element before we apply a css transition.\n\nhttps://hacks.mozilla.org/2015/06/es6-in-depth-symbols/\n\n\n","active":true,"category":"js","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c8c9e3b3854cc26a4c41661","updatedAt":"2019-03-16T12:57:10.263Z","createdAt":"2019-03-16T06:56:59.430Z","title":"namespace","body":"# namespace\n\nhttps://www.typescriptlang.org/docs/handbook/namespaces.html\n\nA note about terminology: It’s important to note that in TypeScript 1.5, the nomenclature has changed. “Internal modules” are now “namespaces”. “External modules” are now simply “modules”, as to align with ECMAScript 2015’s terminology, (namely that module X { is equivalent to the now-preferred namespace X {).\n\nIntroduction\nThe namespace is created to implement the Object oriented princeple `encaptulation` or `seperation of concern`\n\nInstead of defining the things global scope we can keep that encapsulated, \n\nBefore namespace\n![](https://i.imgur.com/y6e7t5X.png)\n\nAfter using namespace\n![](https://i.imgur.com/CMffCy1.png)\n\n## Validator Examples\n\n### Without namespace\n```javascript=\ninterface StringValidator {\n    isAcceptable(s: string): boolean;\n}\n\nlet lettersRegexp = /^[A-Za-z]+$/;\nlet numberRegexp = /^[0-9]+$/;\n\nclass LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n        return lettersRegexp.test(s);\n    }\n}\n\nclass ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: StringValidator; } = {};\nvalidators[\"ZIP code\"] = new ZipCodeValidator();\nvalidators[\"Letters only\"] = new LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n    for (let name in validators) {\n        let isMatch = validators[name].isAcceptable(s);\n        console.log(`'${ s }' ${ isMatch ? \"matches\" : \"does not match\" } '${ name }'.`);\n    }\n}\n```\n\n### After using namespace\n```javascript=\nnamespace Validation {\n    export interface StringValidator {\n        isAcceptable(s: string): boolean;\n    }\n\n    const lettersRegexp = /^[A-Za-z]+$/;\n    const numberRegexp = /^[0-9]+$/;\n\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n}\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n    for (let name in validators) {\n        console.log(`\"${ s }\" - ${ validators[name].isAcceptable(s) ? \"matches\" : \"does not match\" } ${ name }`);\n    }\n}\n```\n\n### Splitting across file\n```javascript=\n`Validation.ts`\nnamespace Validation {\n    export interface StringValidator {\n        isAcceptable(s: string): boolean;\n    }\n}\n```\n`LettersOnlyValidator.ts`\n```javascript=\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const lettersRegexp = /^[A-Za-z]+$/;\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n}\n```\n\n`ZipCodeValidator.ts`\n```javascript=\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const numberRegexp = /^[0-9]+$/;\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n}\n```\n\n`Test.ts`\n\n```javascript=\n/// <reference path=\"Validation.ts\" />\n/// <reference path=\"LettersOnlyValidator.ts\" />\n/// <reference path=\"ZipCodeValidator.ts\" />\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n    for (let name in validators) {\n        console.log(`\"${ s }\" - ${ validators[name].isAcceptable(s) ? \"matches\" : \"does not match\" } ${ name }`);\n    }\n}\n```\n\n### Order of compilation and reference tags\nFirst, we can use concatenated output using the --outFile flag to compile all of the input files into a single JavaScript output file:\n\n`tsc --outFile sample.js Test.ts`\n\nThe compiler will automatically order the output file based on the `reference tags` present in the files. You can also specify each file individually:\n\n\nActual \n`tsc --outFile sample.js Validation.ts LettersOnlyValidator.ts ZipCodeValidator.ts Test.ts`\n\n## Aliases\nDeclaring namespace inside another namespace and how to use it\n\n```javascript=\nnamespace Shapes {\n    export namespace Polygons {\n        export class Triangle { }\n        export class Square { }\n    }\n}\n\nimport polygons = Shapes.Polygons;\nlet sq = new polygons.Square(); \n//or \nlet sq = new Shapes.Polygons.Square();\n```\n## Ambient Namespaces\n< Not clear clarify on this so far >\n\n\nstore with extension `.d.ts`\n```javascript=\ndeclare namespace D3 {\n export interface Selectors {\n        select: {\n            (selector: string): Selection;\n            (element: EventTarget): Selection;\n        };\n    }\n\n    export interface Event {\n        x: number;\n        y: number;\n    }\n export interface Base extends Selectors {\n        event: Event;\n    }\n}\ndeclare var d3: D3.Base;\n\n```\n\nhttps://github.com/Microsoft/TypeScript-Handbook/issues/180\n","active":true,"category":"ts","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5c8d1f3704208c3cc84c6670","updatedAt":"2019-03-26T14:32:17.721Z","createdAt":"2019-03-16T16:07:19.628Z","title":"modules","body":"# modules\nhttps://www.typescriptlang.org/docs/handbook/modules.html#export\n\n\nModules are executed within their own scope, not in the global scope\n\nthis means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the `export forms`\n\nConversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the `import form`\n\n## Export Forms\n\n#### Direct Export\n`ZipCodeValidator.ts`\n```\nexport const numberRegexp = /^[0-9]+$/;\n\nexport class ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\n```\n\n#### Renamed Export\n```\nclass ZipCodeValidator implements StringValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };\n```\n\n#### Re-export\n`ParseIntBasedZipCodeValidator.ts`\n```\nexport class ParseIntBasedZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && parseInt(s).toString() === s;\n    }\n}\n\n// Export original validator but rename it\nexport {ZipCodeValidator as RegExpBasedZipCodeValidator} from \"./ZipCodeValidator\";\n```\n\nOptionally A Module can wrap one or more modules and combine them using \n`export * from \"module`\n```\nexport * from \"./StringValidator\"; // exports interface 'StringValidator'\nexport * from \"./LettersOnlyValidator\"; // exports class 'LettersOnlyValidator'\nexport * from \"./ZipCodeValidator\";  // exports class 'ZipCodeValidator'\n```\n\n\n## Import Forms\n\nSimple import\n```\nimport { ZipCodeValidator } from \"./ZipCodeValidator\";\nlet myValidator = new ZipCodeValidator();\n```\n\n#### Renamed Import\n```javascript=\nimport { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\";\nlet myValidator = new ZCV();\n```javascript=\n#### Import complete module\n```\nimport * as validator from \"./ZipCodeValidator\";\nlet myValidator = new validator.ZipCodeValidator();\n```\n\n#### Import for Side-effects\nThough not recommended practice, some modules set up some global state that can be used by other modules. These modules may not have any exports, or the consumer is not interested in any of their exports. To import these modules, \n\n```javascript=\nimport \"./my-module.js\";\n```\n\n#### Default Export and Import\n- Each module can optionally export a default export\n- Default exports are marked with the keyword default;\n- there can only be one default export per module.\n- default exports are imported using a different import form.\n- Classes and function declarations and variables can be authored to default export\n\nDefault export \n`JQuery.d.ts`\n```javascript=\nexport default class JQuery { //adding default keyword\n\n};\n```\n\nDefault Import\n```javascript=\nimport Jquery from Jquery; // There won't be any curly braces like normal Import, See below for reference\n//import { Jquery } from Jquery;\nJquery('#box').css('height':'50px')\n```\n\nDefault Export of a function event without name will work\n```javascript=\nexport default function (s: string) {\n    return s.length === 5 && numberRegexp.test(s);\n}\n```\n\nDefault Export can be also just values\n```javascript=\nexport default \"123\";\n```\n\nImport\n```javascript=\nimport num from \"./OneTwoThree\";\nconsole.log(num); // \"123\"\n```\n\n#### Equal (=) Export form and require Import form\n`ZipValidator.ts`\nExport\n```\nclass ZipCodeValidator {\n}\nexport = ZipCodeValidator;\n```\n\nImport\n```\nvar ZIP = require('ZipValidator')\nvar zipInstance = new ZIP();\n```\n\n### Code generation for modules\n- Depending on the module target specified during compilation, the compiler will generate appropriate code for Node.js (CommonJS), require.js (AMD), UMD, SystemJS, or ECMAScript 2015 native modules (ES6) module-loading systems. \n\n- For more information on what the define, require and register calls in the generated code do, consult the documentation for each module loader.\n\nSimple example \n`SimpleModule.ts`\n```javascript\nimport m = require(\"mod\");\nexport let t = m.something + 1;\n```\n\nHow it got compiled in AMD ( require.js )\n`AMD / RequireJS SimpleModule.js`\n```\ndefine([\"require\", \"exports\", \"./mod\"], function (require, exports, mod_1) {\n    exports.t = mod_1.something + 1;\n});\n```\n\nHow it got compiled in common js ( NodeJS )\n```\nvar mod_1 = require(\"./mod\");\nexports.t = mod_1.something + 1;\n```\ncommand to specifically compile typescript module into a target library\n\n`tsc --module commonjs Test.ts` ( nodejs )\n`tsc --module amd Test.ts` ( requirejs )\n\n### declare keyword in typescript\n\n`var` creates a new variable. \n`declare` is used to tell TypeScript that the variable has been created elsewhere. \nIf you use `declare`, nothing is added to the JavaScript that is generated - it is simply a hint to the compiler.\n\nFor example, if you use an external script that defines `var externalModule`, you would use `declare var externalModule` to hint to the TypeScript compiler that externalModule has already been set up\n\nWe can also re-export a declared variable through a different name like below\n`App.ts`\n```typescript=\ndeclare let $: JQuery;\nexport default $;\n```\n\n\n## Optional module loading and advanced loading techniques\n- In some cases, you may want to only load a module under some conditions. \n\n- In TypeScript, we can use the pattern shown below to implement this and other advanced loading scenarios to directly invoke the module loaders without losing type safety.\n\n- The compiler detects whether each module is used in the emitted JavaScript. ( While compiling it will check whether module is not used anywhere other than as a type checker )\n\n- This elision ( the omission of a sound or syllable ) of unused references is a good performance optimization, and also allows for optional loading of those modules. ( The omission of unused modules leads to good performence )\n\n- The core idea of the pattern is that the import id = require(\"...\") statement gives us access to the types exposed by the module.\n\n- The module loader is invoked (through require) dynamically,\n\n- This leverages the reference-elision optimization so that the module is only loaded when needed. \n\n- For this pattern to work, it’s important that the symbol defined via an import is only used in type positions (i.e. never in a position that would be emitted into the JavaScript).\n\n - To maintain type safety, we can use the typeof keyword. The typeof keyword, when used in a type position, produces the type of a value, in this case the type of the module.\n\nDynamic loading in nodejs\n```\ndeclare function require(moduleName: string): any;\n\nimport { ZipCodeValidator as Zip } from \"./ZipCodeValidator\";\n\nif (needZipValidation) {\n    let ZipCodeValidator: typeof Zip = require(\"./ZipCodeValidator\");\n    let validator = new ZipCodeValidator();\n    if (validator.isAcceptable(\"...\")) { /* ... */ }\n}\n```\n\nFor more examples refer here\nhttps://www.typescriptlang.org/docs/handbook/modules.html\n\n## Working with other javascript libraries ( ambient )\n- How to consume libraries which are not written in typescript inside typescript\n\n- We call declarations that don’t define an implementation `ambient`. \n\n- Typically, these are defined in .d.ts files. If you’re familiar with C/C++, you can think of these as .h files. Let’s look at a few examples.\n\n#### Ambient modules\n< Did't understand fully, Hence moving forward >\n\n#### Wildcard module declarations\n\nSome module loaders such as SystemJS and AMD allow non-JavaScript content to be imported. \n\n```typescript=\ndeclare module \"*!text\" {\n    const content: string;\n    export default content;\n}\n```\n\nAnother \n```typescript=\nimport fileContent from \"./xyz.txt!text\";\nimport data from \"json!http://example.com/data.json\";\nconsole.log(data, fileContent);\n```\n\n#### UMD modules\nSome libraries are designed to be used in many module loaders, or with no module loading (global variables). These are known as UMD modules. These libraries can be accessed through either an import or a global variable. For example:\n\n`math-lib.d.ts`\n```javascript=\nexport function isPrime(x: number): boolean;\nexport as namespace mathLib;\n```\n\n```javascript=\nimport { isPrime } from \"math-lib\";\nisPrime(2);\nmathLib.isPrime(2); // ERROR: can't use the global definition from inside a module\n```\n\nIt can also be used as a global variable, but only inside of a script. (A script is a file with no imports or exports.)\n\n```javascript=\nmathLib.isPrime(2);\n```\n\n","active":true,"category":"ts","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0},{"_id":"5cab458948c18230c0fae923","updatedAt":"2019-04-24T04:26:32.539Z","createdAt":"2019-04-08T12:58:49.157Z","title":"Decorators","body":"#Decorators\n\nBefore introducing decorators I would like to say few words about AOP (Aspect-oriented Programing). \n\n### AOP  ( Aspect Oriented Programming)\n\n- AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns.\n\n- The biggest advantage of using AOP is the separation of irrelevant code from the main functionality of the method to a different place.\n\n### Example\n\n##### Function without AOP ( Decorator )\n\n```javascript=\nfunction add(x, y) {\n    log(‘foo was called!’);\n    If(!validate(arguments)) {\n        throw (...)\n    }\n    If(!authorized()) {\n        throw ()\n    }\n    return x + y;\n}\n```\n\n##### Function with AOP\n```javascript=\n@log\n@validate\n@authorize\nfunction add(x, y) {\n    return x + y;\n}\n```\n\n### Typescript Decorators\n\nDecorators can be attached to:\n- Methods\n- Classes\n- Properties\n- Parameters\n- Accessor\n\n#### Method Decorator\n\n##### Simple example\n```\nfunction log(target, key, descriptor) {\n\tconsole.log(`${key} was called!`);\n}\n\nclass P {\n\t@log\n\tfoo() {\n\t\tconsole.log(‘Do something’);\n\t}\n}\nconst p = new P();\np.foo();\n\n/* Output */\n// foo was called!\n// Do something\n```\n\n##### A Decorator function gets three parameters\n\n`target` - Either the constructor function of the class for a static member ( `ClassName.PropertyName` )\n\nor the prototype of the class for an instance member.\n( `ClassName.prototype.PropertyName` )\n\n`key` - The name of the member.\n`descriptors` - The Property Descriptor for the member ( Enumarable, configurable, writable ( mutable ))\n\n#####  Example - 2\n\nThe below is a classic example to get metrics of a function.\n\n```javascript=\nfunction log(target, key, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function() {\n        console.log(`${key} was called with:`, arguments);\n        var result = originalMethod.apply(this, arguments);\n        return result;\n    };\n    return descriptor;\n}\n\nclass P2 {\n    @log\n    foo(a, b) {\n        console.log(`Do something`);\n    }\n}\nconst p2 = new P2();\np2.foo('hello', 'world');\n// printed to console :\n// foo was called with: { '0': 'hello', '1': 'world' }\n// Do something\n```\n\n### Decorator Composition ( multiple decorators and order )\n\n - Multiple decorators can be applied to a declaration, as in the following examples:\n```javascript=\n@f\n@g\nfunction log(){\n}\t\n```\n\n- When multiple decorators apply to a single declaration, their evaluation is similar to function composition in mathematics. \n\n- In this model, when composing functions f and g, the resulting composite (f ∘ g)(x) is equivalent to f(g(x)).\n\n\n- The expressions for each decorator are evaluated top-to-bottom.\n- The results are then called as functions from bottom-to-top.\n\n```javascript=\nfunction f() {\n    console.log(\"f(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"f(): called\");\n    }\n}\n\nfunction g() {\n    console.log(\"g(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"g(): called\");\n    }\n}\n\nclass C {\n    @f()\n    @g()\n    method() {}\n}\n\n/*output */\n// f(): evaluated\n// g(): evaluated\n// g(): called\n// f(): called\n```\n\n### Decorator Evaluation Order\n\nThere is a well defined order to how decorators applied to various declarations inside of a class are applied:\n\n- Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each instance member.\n- Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each static member.\n- Parameter Decorators are applied for the constructor.\n- Class Decorators are applied for the class.\n\n### Class Decorators\n - Class Decorator is declared just before a class declaration. \n \n - The class decorator is `applied to the constructor of the class` and can be used to observe, modify, or replace a class definition. \n\n\n :exclamation: A class decorator cannot be used in a declaration file, or in any other ambient context (such as on a declare class).\n\n\n:sparkle: For Class constructor of the decorated class as its only argument.\n\n:sparkle: If the class decorator returns a value, it will replace the class declaration with the provided constructor function.\n\nExample \n```javascript=\n@sealed\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\nfunction sealed(constructor: Function) {\n    Object.seal(constructor);\n    Object.seal(constructor.prototype);\n}\n```\n\n##### Overriding constrctor  ( need more clarity on this )\n```javascript\nfunction classDecorator<T extends {new(...args:any[]):{}}>(constructor:T) {\n    return class extends constructor {\n        newProperty = \"new property\";\n        hello = \"override\";\n    }\n}\n\n@classDecorator\nclass Greeter {\n    property = \"property\";\n    hello: string;\n    constructor(m: string) {\n        this.hello = m;\n    }\n}\n\nconsole.log(new Greeter(\"world\"));\n```\n\n### Access Descriptor\nAn Accessor Decorator is declared just before an accessor declaration. The accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor’s definitions.\n\nNote \nTypeScript disallows decorating both the `get` and `set` accessor for a single member. Instead, all decorators for the member must be applied to the first accessor specified in document order. This is `because decorators apply to a Property Descriptor`, `which combines both the get and set accessor`, not each declaration separately.\n\nExample\n```javascript\nclass Point {\n    private _x: number;\n    private _y: number;\n    constructor(x: number, y: number) {\n        this._x = x;\n        this._y = y;\n    }\n\n    @configurable(false)\n    get x() { return this._x; }\n\n    @configurable(false)\n    get y() { return this._y; }\n}\n```\n\n```javascript\nfunction configurable(value: boolean) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        descriptor.configurable = value;\n    };\n}\n```\n\n### Property Descriptor\nA Property Decorator is declared just before a property declaration.\n\nThe expression for the property decorator will be called as a function at runtime, with the following two arguments\n\n1. Either the constructor function of the class for a static member, or the prototype of the class for an instance member.\n\n2. The name of the member.\n\n\n","active":true,"category":"ts","createdBy":"sivashanmugam4444","updatedBy":"sivashanmugam4444","__v":0}]